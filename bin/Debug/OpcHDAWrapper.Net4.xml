<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpcHDAWrapper.Net4</name>
    </assembly>
    <members>
        <member name="T:OPCHDA.NET.Images">
            <summary>
            Summary description for Resources.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.Images.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.Images.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OPCHDA.HDAQuality">
            <summary>
            This helper class supports the decoding of OPC HDA quality codes.<br/>
            The HDA quality codes are 32 bit values with:<br/>
            - high 16 bits: HDA specific code<br/>
            - low 16 bits: OPC DA quality code<br/>
            Servers may return a quality that has information for both Data Access quality and 
            information for HDA quality, i.e. 0x000100c0.
            </summary>
        </member>
        <member name="M:OPCHDA.HDAQuality.GetHDAPart(System.Int32)">
            <summary>
            Returns the HDA quality part, nulling the OPC DA quality code part. 
            The returned enumeration type can have multiple states set and need to 
            be checked by AND-ing the value with individual. 
            </summary>
            <param name="qualityCode"></param>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.HDAQuality.GetDAQuality(System.Int32)">
            <summary>
            Returns the DA quality part as an emumeration state. 
            </summary>
            <param name="qualityCode">Quality code received from the OPC HDA server.</param>
            <returns>OPC DA Quality enumeration value</returns>
        </member>
        <member name="M:OPCHDA.HDAQuality.CheckHDAState(System.Int32,OPCHDA.HDAQualityState)">
            <summary>
            Checks a single bit in the OPC HDA quality value.
            </summary>
            <param name="qualityCode">Quality code received from the OPC HDA server.</param>
            <param name="mask">HDAQualityState enumeration value</param>
            <returns>Returns true if the requested quality state is set in the quality value.</returns>
        </member>
        <member name="T:OPCHDA.HDAQualityState">
            <summary>
            OPC HDA quality states
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.ExtraData">
            <summary>
            More than one piece of data that may be hidden exists at same timestamp.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.Interpolated">
            <summary>
            Interpolated data value.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.Raw">
            <summary>
            Raw data value.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.Calculated">
            <summary>
            Calculated data value, as would be returned from a ReadProcessed call.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.NoBound">
            <summary>
            No data found to provide upper or lower bound value.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.NoData">
            <summary>
            No data collected. Archiving not active (for item or all items).
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.DataLost">
            <summary>
            Collection started / stopped / lost.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.Conversion">
            <summary>
            Scaling / conversion error.
            </summary>
        </member>
        <member name="F:OPCHDA.HDAQualityState.Partial">
            <summary>
            Aggregate value is for an incomplete interval.
            </summary>
        </member>
        <member name="T:OPCHDA.DAQualityState">
            <summary>
            Enumerator with the OPC DA defined quality states.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.good">
            <summary>
            The value is good. There are no special conditions.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.goodLocalOverride">
            <summary>
            The value has been Overridden. Typically this is means the input has been 
            disconnected and a manually entered value has been ‘forced’.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.bad">
            <summary>
            The value is bad but no specific reason is known.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badConfigurationError">
            <summary>
            There is some server specific problem with the configuration. 
            For example the item in question has been deleted from the configuration.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badNotConnected">
            <summary>
            The input is required to be logically connected to something but is not. 
            This quality may reflect that no value is available at this time, 
            for reasons like the value may have not been provided by the data source.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badDeviceFailure">
            <summary>
            A device failure has been detected.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badSensorFailure">
            <summary>
            A sensor failure had been detected (the ’Limits’ field can provide additional 
            diagnostic information in some situations).
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badLastKnownValue">
            <summary>
            Communications have failed. However, the last known value is available. 
            Note that the ‘age’ of the value may be determined from the TIMESTAMP in the OPCITEMSTATE.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badCommFailure">
            <summary>
            Communications have failed. There is no last known value is available.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badOutOfService">
            <summary>
            The block is off scan or otherwise locked. This quality is also used when the active 
            state of the item or the group containing the item is InActive.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.badWaitingForInitialData">
            <summary>
            After Items are added to a group, it may take some time for the server to actually 
            obtain values for these items. In such cases the client might perform a read (from cache), 
            or establish a ConnectionPoint based subscription and/or execute a Refresh on such a 
            subscription before the values are available. This substatus is only available from 
            OPC DA 3.0 or newer servers.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.uncertain">
            <summary>
            There is no specific reason why the value is uncertain.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.uncertainLastUsableValue">
            <summary>
            Whatever was writing this value has stopped doing so. 
            The returned value should be regarded as ‘stale’. 
            Note that this differs from a BAD value with Substatus 5 (Last Known Value). 
            That status is associated specifically with a detectable communications error 
            on a ‘fetched’ value. This error is associated with the failure of some external 
            source to ‘put’ something into the value within an acceptable period of time. 
            Note that the ‘age’ of the value can be determined from the TIMESTAMP in OPCITEMSTATE.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.uncertainSensorNotAccurate">
            <summary>
            Either the value has ‘pegged’ at one of the sensor limits (in which case the 
            limit field should be set to 1 or 2) or the sensor is otherwise known to be out 
            of calibration via some form of internal diagnostics (in which case the 
            limit field should be 0).
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.uncertainEUExceeded">
            <summary>
            The returned value is outside the limits defined for this parameter. 
            Note that in this case (per the Fieldbus Specification) the ‘Limits’ field indicates 
            which limit has been exceeded but does NOT necessarily imply that the value cannot move 
            farther out of range.
            </summary>
        </member>
        <member name="F:OPCHDA.DAQualityState.uncertainSubNormal">
            <summary>
            The value is derived from multiple sources and has less than the required 
            number of Good sources.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.BrowseFilter">
            <summary>
            Browse filter definition. Only items are returned that pass all filter elements.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.BrowseFilter.AttributeID">
            <summary>
            Name of attribute that is to be filtered
            </summary>
        </member>
        <member name="F:OPCHDA.NET.BrowseFilter.Operator">
            <summary>
            Operator for filter calculation
            </summary>
        </member>
        <member name="F:OPCHDA.NET.BrowseFilter.Value">
            <summary>
            Value to compared with the attribute value. For item names this can be a wildcard definition.   
            </summary>
        </member>
        <member name="T:OPCHDA.NET.StatusInfo">
            <summary>Data object returned by GetHistorianStatus()</summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.Status">
            <summary>
            	The current status of the historian.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.CurrentTime">
            <summary>
            The current time at the historian location.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.StartTime">
            <summary>
            The time when the historian was last started.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.MajorVersion">
            <summary>
            The major version identification of the historian.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.MinorVersion">
            <summary>
            The minor version identification of the historian.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.BuildNumber">
            <summary>
            The build number identification of the historian.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.MaxReturnValues">
            <summary>
            The maximum number of values that can be returned by the server on a per item basis. 
            A value of 0 indicates that the server forces no limit on the number of values it can return.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.StatusString">
            <summary>
            A string explaining historian status when the Status value is OPCHDA_INDETERMINATE.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.StatusInfo.VendorInfo">
            <summary>
            A vendor specific informational string.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_SERVERSTATUS">
            <summary>
            Server status information
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_SERVERSTATUS.OPCHDA_UP">
            <summary>
            The historian is running.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_SERVERSTATUS.OPCHDA_DOWN">
            <summary>
            The historian is not running.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_SERVERSTATUS.OPCHDA_INDETERMINATE">
            <summary>
            The status of the historian is indeterminate. See the StatusString for further information.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_BROWSEDIRECTION">
            <summary>
            Browse direction enumerator
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSEDIRECTION.OPCHDA_BROWSE_UP">
            <summary>
            Move the browse position up to the parent branch of the current position.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSEDIRECTION.OPCHDA_BROWSE_DOWN">
            <summary>
            Move the browse position down to the branch indicated by szString from the current position. 
            Note: szString must contain only the name of a branch that is a child of the current position. 
            It cannot move multiple branches.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSEDIRECTION.OPCHDA_BROWSE_DIRECT">
            <summary>
            Move the browse position to the fully qualified branch indicated by szString. Note: this move 
            is relative to the root, not the current position. If the position string is an empty string, 
            the browser shall move to the root.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_BROWSETYPE">
             <remarks>
             There is not a browse type which will return all objects at the current level. The set of objects 
             which are returned from a call for OPCHDA_BRANCH and the set returned from a call for OPCHDA_LEAF, 
             together, are the set of all the objects at the current level. The set of objects
             returned for OPCHDA_ITEMS may be the same set as that returned for OPCHDA_LEAF, if there are
             no branches which may have an ItemID, or it may be a superset of OPCHDA_LEAF. In no case may
             the set returned from OPCHDA_ITEMS be smaller than that returned for OPCHDA_LEAF.
             The ItemIDs returned from a call for OPCHDA_FLAT will be fully qualified ItemIDs which can be
             used in a call to IOPCHDA_Server::GetItemHandles. The names returned for the other types are short
             names, which can be used in a subsequent call to IOPCHDA_Browser::ChangeBrowsePosition or
             IOPCHDA_Browser::GetItemID, but which are not expected to be fully qualified ItemIDs suitable for
             IOPCHDA_Server::GetItemHandles. While servers are allowed to use the fully qualified ItemID as
             the short name, clients must assume that any name returned from GetEnum will need to be passed to
             GetItemID in order to obtain the fully qualified ItemID.
            </remarks>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSETYPE.OPCHDA_BRANCH">
            <summary>
            Returns only nodes that can have children. These may or may not be items.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSETYPE.OPCHDA_LEAF">
            <summary>
            Returns only nodes that cannot have children. These are always items.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSETYPE.OPCHDA_FLAT">
            <summary>
            Returns everything at and below this level including all children of children, all the way 
            to the end, as fully qualified ItemIDs – basically ‘pretends’ that the address space at this 
            level and below is FLAT. This parameter is ignored for FLAT address space.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_BROWSETYPE.OPCHDA_ITEMS">
            <summary>
            Returns all items at the current browse position. This means all objects at the current level 
            which are valid objects to send to IOPCHDA_Server::GetItemHandles. Note: this browse type will 
            normally be used instead of OPCHDA_LEAF to guarantee that all items are displayed.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_ANNOTATIONCAPABILITIES">
            <remarks>
            Identifies the capabilities of the annotation interfaces. The values of the enumeration are 
            combined to form a mask when the capabilities are queried.
            </remarks>
        </member>
        <member name="T:OPCHDA.NET.AnnotationCapabilities">
            <summary>
            Identifies the capabilities of the synchronous annotation interface as a bit mask.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.AnnotationCapabilitiesAsync">
            <summary>
            Identifies the capabilities of the asynchronous annotation interface as a bit mask.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_UPDATECAPABILITIES">
            <remarks>
            Identifies the capabilities of the update interfaces. The values of the enumeration are 
            combined to form a mask when the capabilities are queried.
            </remarks>
        </member>
        <member name="T:OPCHDA.NET.UpdateCapabilities">
            <summary>
            Identifies the capabilities of the synchronous update interface as a bit mask.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.UpdateCapabilitiesAsync">
            <summary>
            Identifies the capabilities of the asynchronous update interface as a bit mask.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_EQUAL">
            <summary>
            Attribute value equals filter value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_LESS">
            <summary>
            Attribute value is less than filter value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_LESSEQUAL">
            <summary>
            Attribute value is less than or equal to filter value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_GREATER">
            <summary>
            Attribute value is greater than filter value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_GREATEREQUAL">
            <summary>
            Attribute value is greater than or equal to filter value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_OPERATORCODES.OPCHDA_NOTEQUAL">
            <summary>
            Attribute value is not equal to filter value.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_EDITTYPE">
            <summary>
            Edit Type selection.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_EDITTYPE.OPCHDA_INSERT">
            <summary>
            Insert data into history. If data already exists at the timestamp
            specified, the operation may optionally fail.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_EDITTYPE.OPCHDA_REPLACE">
            <summary>
            Replace data in history. If data does not exist at the timestamp
            specified, the operation may optionally fail.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_EDITTYPE.OPCHDA_INSERTREPLACE">
            <summary>
            Insert or replace the data in history, depending on whether data already exists or not.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_EDITTYPE.OPCHDA_DELETE">
            <summary>
            Delete data from history.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_AGGREGATE">
            <summary>
            This indicates the aggregate to be used when retrieving processed history. The precise meaning of
            Teach aggregate may be server specific. Aggregates not supported by the server shall return
            TE_INVALIDARG in the error code for that aggregate. Additional aggregates may be defined by
            Tvendors. Server specific aggregates must be defined with values beginning at 0x80000000. The OPC
            Tfoundation reserves all aggregates IDs from 0 to 0x7fffffff.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_INTERPOLATIVE">
            <summary>
            Do not retrieve an aggregate. This is used for retrieving interpolated values.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_TOTAL">
            <summary>
            Retrieve the totalized value (time integral) of the data over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_AVERAGE">
            <summary>
            Retrieve the average data over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_TIMEAVERAGE">
            <summary>
            Retrieve the time weighted average data over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_COUNT">
            <summary>
            Retrieve the number of raw values over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_STDEV">
            <summary>
            Retrieve the standard deviation over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_MINIMUMACTUALTIME">
            <summary>
            Retrieve the minimum value in the resample interval and the
            timestamp of the minimum value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_MINIMUM">
            <summary>
            Retrieve the minimum value in the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_MAXIMUMACTUALTIME">
            <summary>
            Retrieve the maximum value in the resample interval and the timestamp of the maximum value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_MAXIMUM">
            <summary>
            Retrieve the maximum value in the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_START">
            <summary>
            Retrieve the value at the beginning of the resample interval. The
            time stamp is the time stamp of the beginning of the interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_END">
            <summary>
            Retrieve the value at the end of the resample interval. 
            The time stamp is the time stamp of the end of the interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_DELTA">
            <summary>
            Retrieve the difference between the first and last value in the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_REGSLOPE">
            <summary>
            Retrieve the slope of the regression line over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_REGCONST">
            <summary>
            Retrieve the intercept of the regression line over the resample
            interval. This is the value of the regression line at the start of the interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_REGDEV">
            <summary>
            Retrieve the standard deviation of the regression line over the resample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_VARIANCE">
            <summary>
            Retrieve the variance over the sample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_RANGE">
            <summary>
            Retrieve the difference between the minimum and maximum value over the sample interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_DURATIONGOOD">
            <summary>
            Retrieve the duration (in seconds) of time in the interval during which the data is good.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_DURATIONBAD">
            <summary>
            Retrieve the duration (in seconds) of time in the interval during which the data is bad.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_PERCENTGOOD">
            <summary>
            Retrieve the percent of data (1 equals 100 percent) in the interval which has good quality.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_PERCENTBAD">
            <summary>
            Retrieve the percent of data (1 equals 100 percent) in the interval which has bad quality.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_WORSTQUALITY">
            <summary>
            Retrieve the worst quality of data in the interval.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AGGREGATE.OPCHDA_ANNOTATIONS">
            <summary>
            Retrieve the number of annotations in the interval.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDA_AttributDefs">
            <summary>
            OPC defined general attributes.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_DATA_TYPE">
            <summary>
            Specifies the data type for the item.  See the definition of a VARIANT for valid values (VT_R4, etc.)
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_DESCRIPTION">
            <summary>
            Describes the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_ENG_UNITS">
            <summary>
            Specifies the label to use in displays to define the units for the item (e.g., kg/sec).
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_STEPPED">
            <summary>
            Specifies whether data from the history repository should be displayed as interpolated (sloped lines between points) or stepped (vertically-connected horizontal lines between points) data.  Value of 0 indicates interpolated.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_ARCHIVING">
            <summary>
            Indicates whether historian is recording data for this item (0 means no).
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_DERIVE_EQUATION">
            <summary>
            Specifies the equation to be used by a derived item to calculate its value.  This is a free-form string.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_NODE_NAME">
            <summary>
            Specifies the machine which is the source for the item.  This is intended to be the broadest category for defining sources.  For an OPC Data Access Server source, this is the nodename or IP address of the server.  For non-OPC sources, the meaning of this field is server-specific.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_PROCESS_NAME">
            <summary>
            Specifies the process which is the source for the item.  This is intended to the second-broadest category for defining sources.  For an OPC DA server, this would be the registered server name.  For non-OPC sources, the meaning of this field is server-specific.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_SOURCE_NAME">
            <summary>
            Specifies the name of the item on the source.  For an OPC DA server, this is the ItemID.  For non-OPC sources, the meaning of this field is server-specific.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_SOURCE_TYPE">
            <summary>
            Specifies what sort of source produces the data for the item.  For an OPC DA server, this would be "OPC".  For non-OPC sources, the meaning of this field is server-specific.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_NORMAL_MAXIMUM">
            <summary>
            Specifies the upper limit for the normal value range for the item.  OPCHDA_NORMAL_MAXIMUM is used for trend display default scaling and exception deviation limit calculations.  OPCHDA_ NORMAL _MAXIMUM should be the normal high value for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_NORMAL_MINIMUM">
            <summary>
            Specifies the lower limit for the normal value range for the item.  OPCHDA_ NORMAL _MINIMUM is used for trend display default scaling and exception deviation limit calculations.  OPCHDA_ NORMAL _MINIMUM should be the normal low value for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_ITEMID">
            <summary>
            Specifies the item id. This is used to allow filtering in the CreateBrowse method.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_MAX_TIME_INT">
            <summary>
            Specifies the maximum interval between data points in the history repository regardless of their value change. A new value shall be stored in history whenever OPCHDA_MAX_TIME_INT seconds have passed since the last value stored for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_MIN_TIME_INT">
            <summary>
            Specifies the minimum interval between data points in the history repository regardless of their value change. A new value shall be not be stored in history unless OPCHDA_MIN_TIME_INT seconds have passed since the last value stored for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_EXCEPTION_DEV">
            <summary>
            Specifies the minimum amount that the data for the item must change in order for the change to be reported to the history database.  See OPCHDA_EXCEPTION_DEV_TYPE for the specific meaning of this field.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_EXCEPTION_DEV_TYPE">
            <summary>
            Specifies whether the OPCHDA_EXCEPTION_DEV  is given as an absolute value, percent of span, or percent of value.  The span is defined as OPCHDA_HIGH_ENTRY_LIMIT - OPCHDA_LOW_ENTRY_LIMIT.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_HIGH_ENTRY_LIMIT">
            <summary>
            Specifies the highest valid value for the item.  A value for the item that is above OPCHDA_HIGH_ENTRY_LIMIT cannot be entered into history.   This is the top of the span.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDA_AttributDefs.OPCHDA_LOW_ENTRY_LIMIT">
            <summary>
            Specifies the lowest valid value for the item.  A value for the item that is below OPCHDA_LOW_ENTRY_LIMIT cannot be entered into history.   This is the zero for the span.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAannotation.Client">
            <summary>
            The client provided handle for this item
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAannotation.TimeStamps">
            <summary>
            UTC TimeStamps for the annotations.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAannotation.Annotations">
            <summary>
            The array of annotations.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAannotation.AnnotationTimes">
            <summary>
            The time the annotation was added. This will probably be different than the ftTimeStamp.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAannotation.Users">
            <summary>
            The name of the user that added the annotation.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.Client">
            <summary>
            The client provided handle for this item
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.TimeStamps">
            <summary>
            UTC TimeStamps for this item’s values. This field may be
            NULL if timestamps were not requested in the call.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.Qualities">
            <summary>
            The qualities of the data for this item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.DataValues">
            <summary>
            The values for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.ModificationTimes">
            <summary>
            The time the modification was made. Support for this field
            is optional. A NULL pointer shall be returned if it is not implemented.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.EditTypes">
            <summary>
            The modification type for the item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAmodifiedItem.Users">
            <summary>
            The name of the user that made the modification. Support
            for this field is optional. A NULL pointer shall be returned if it is not implemented.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDAattribute">
            <remarks>
            The return from the call is an array of these structures, one for each AttributeID specified in the call.
            The timestamp is that of the time when the attribute was set to the specified value, except for the first
            value returned: as stated earlier, the first value returned shall be the value of the attribute at the start
            time of the specified interval, and thus the timestamp for that value should be the start time of the
            interval.
            </remarks>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAattribute.Client">
            <summary>
            The client provided handle for this item
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAattribute.AttributeID">
            <summary>
            AttributeID of this value.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAattribute.TimeStamps">
            <summary>
            UTC TimeStamps for this attribute’s values.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAattribute.AttributeValues">
            <summary>
            Array of values for the attribute.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime.AsString">
            <summary>
            Flag indicating if the time is in string (relative time) format
            (TRUE) or DateTime (absolute) format (FALSE).
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime.TimeString">
            <summary>
            String format for the time.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime.Time">
            <summary>
            DateTime format for the time.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime64.AsString">
            <summary>
            Flag indicating if the time is in string (relative time) format
            (TRUE) or DateTime (absolute) format (FALSE).
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime64.TimeString">
            <summary>
            String format for the time.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAtime64.Time">
            <summary>
            DateTime format for the time.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDAitem">
            <remarks>
            This structure was changed between v1.0 of the standard and v1.1 of the standard. Rather than passing
            the Aggregate as an ENUM, it must be passed as a DWORD, to allow vendors to use vendor-specific
            aggregate values.
            Servers and clients build with v1.0 of the standard will work with those built with v1.1, but v1.0
            clients may not be compatible with v1.1 servers which return vendor-specified aggregates.
            </remarks>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAitem.Client">
            <summary>
            The client provided handle for this item
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAitem.Aggregate">
            <summary>
            The aggregate which was applied to retrieve the data. For the IOPCHDA_SyncRead::ReadRaw and
            IOPCHAD_SyncRead::ReadAtTime, this should be OPCHDA_NOAGGREGATE.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAitem.TimeStamps">
            <summary>
            UTC TimeStamps for this item’s values. This field may be
            NULL if timestamps were not requested in the call.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAitem.Qualities">
            <summary>
            The qualities of the data for this item.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OPCHDAitem.DataValues">
            <summary>
            The value for this item.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ShutdownRequestEventArgs">
            <summary>
            Shutdown request handler    IOPCShutdown::ShutdownRequest
            This method is provided by the client so that the server can request that 
            the client disconnect from the server. The client should UnAdvise all 
            connections, Remove all groups and release all interfaces. 
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OPCHDABrowser">
            <remarks>
            The method OPCHDAServer.CreateBrowse() creates such an object. Don't construct it
            directly.
            </remarks>
            <summary>Browses the HDA server with different filters</summary>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.#ctor(OPCHDA.NET.OpcHDAServer)">
            <summary>
            Constructs a browser instance for the specified server.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="F:OPCHDA.NET.OPCHDABrowser.OwnerServer">
            <summary>
            Server instance for this browser
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.Create(OPCHDA.Interface.IOPCHDA_Server,OPCHDA.NET.BrowseFilter[],System.Int32[]@)">
            <summary>
            Create an Area Browser
            The filters will be applied to all method calls to this instance of the browser. 
            The server is expected to validate the filter arrays. The server must support a single 
            client having simultaneous access to multiple browse interfaces. Filtering is optional 
            behavior for a server. If a server does not support filtering, or only supports filtering 
            onsome of the requested attributes, the server shall return an interface to a browser which 
            is only filteredon the accepted attributes. A server which does not support filtering shall 
            return a pointer to an unfiltered browser interface. Filter operations are additive. 
            To successfully pass filter criteria, the item must successfully satisfy all of the filter 
            criteria. Implementation of filtering and browsing is server specific, however it is anticipated 
            that servers with hierarchical name spaces may only apply filters to leaves, causing them to 
            return branches which have no leaves which satisfy the criteria. It is anticipated that a 
            client may create one browser to locate a particular area of the hierarchy, obtain a fully 
            qualified branch name using GetBranchPosition, then pass that branch name to another browser 
            which is using a different filter set. Servers may optionally support wild cards for string 
            filters. To represent a single character the “?” shall be used. To represent multiple 
            characters the “*” shall be used.
            </summary>
            <param name="ifHDASrv"></param>
            <param name="filter">The filter definitions.</param>
            <param name="errors">Reports the validity of the filtering inputs.</param>
            <returns>S_OK, OPC_W_NOFILTER, OPC_E_UNKNOWNATTRID, OPC_E_INVALIDDATATYPE, E_INVALIDARG, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.Create(OPCHDA.Interface.IOPCHDA_Server,System.Int32[],OPCHDA.NET.OPCHDA_OPERATORCODES[],System.String[],System.Int32[]@)">
            <summary>
            Create an Area Browser
            The filters will be applied to all method calls to this instance of the browser. 
            The server is expected to validate the filter arrays. The server must support a single 
            client having simultaneous access to multiple browse interfaces. Filtering is optional 
            behavior for a server. If a server does not support filtering, or only supports filtering 
            onsome of the requested attributes, the server shall return an interface to a browser which 
            is only filteredon the accepted attributes. A server which does not support filtering shall 
            return a pointer to an unfiltered browser interface. Filter operations are additive. 
            To successfully pass filter criteria, the item must successfully satisfy all of the filter 
            criteria. Implementation of filtering and browsing is server specific, however it is anticipated 
            that servers with hierarchical name spaces may only apply filters to leaves, causing them to 
            return branches which have no leaves which satisfy the criteria. It is anticipated that a 
            client may create one browser to locate a particular area of the hierarchy, obtain a fully 
            qualified branch name using GetBranchPosition, then pass that branch name to another browser 
            which is using a different filter set. Servers may optionally support wild cards for string 
            filters. To represent a single character the “?” shall be used. To represent multiple 
            characters the “*” shall be used.
            </summary>
            <param name="ifHDASrv"></param>
            <param name="attrID">The filter attribute IDs.</param>
            <param name="operators">The filter operators.</param>
            <param name="filter">The filter values.</param>
            <param name="errors">Reports the validity of the filtering inputs.</param>
            <returns>S_OK, OPC_W_NOFILTER, OPC_E_UNKNOWNATTRID, OPC_E_INVALIDDATATYPE, E_INVALIDARG, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.Dispose">
            <summary>
            Release the browser COM object. This method MUST be executed before the client terminates for
            the OPC server to be released.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.GetEnum(OPCHDA.NET.OPCHDA_BROWSETYPE,System.String[]@)">
            <summary>
            This function returns a string array with all enumerated leaves, branches, or
            ItemIDs, depending on the browse type requested. Whether a branch is an ItemID is
            undetermined and may be server dependent. The members of the array set will be
            determined by the position of the browser in the server address space and the value of
            the filters when the browser interface was created. If no ItemIDs pass the filter
            criteria, the array is empty. Thus, a server which has a flat namespace would always
            return an empty array when asked for a list of branches, and it would return the same
            list whether it was asked for leafs or ItemIDs, since all of its Items are, by
            definition, leafs.
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED or E_FAIL</returns>
            <param name="dwBrowseType">The type of browse to perform.</param>
            <param name="nodes">returns the browsed nodes (branches, leafs,..)
            if the HRESULT is other than S_OK or S_FALSE. </param>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.ChangeBrowsePosition(OPCHDA.NET.OPCHDA_BROWSEDIRECTION,System.String)">
            <summary>
            This method provides a way to move up or down relative to the current position, 
            or directly to a given position in a hierarchy.
            </summary>
            <param name="BrowseDirection">The direction to move the browse interface.</param>
            <param name="BrowsePos">Indicates the branch name when moving down the hierarchy and the full 
            path to a branch when moving directly to a position. Note: this parameter is ignored 
            when moving up the hierarchy and should be set to an empty string. For OPCHDA_BROWSE_DIRECT, 
            if an empty string is passed, the server shall move the browser to the root position.</param>
            <returns>S_OK or S_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.GetItemID(System.String,System.String@)">
            <summary>
            This function provides a way to get a fully qualified item identification. This is required 
            since the browsing functions return only the components or tokens that make up an ItemID and 
            do not return the delimiters used to separate those tokens.
            </summary>
            <param name="Node">An item name from the Enum set returned by GetEnum as an OPCHDA_LEAF or 
            OPCHDA_ITEMID</param>
            <param name="ItemID">A pointer to the string which contains the fully qualified ItemID.</param>
            <returns>S_OK or S_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OPCHDABrowser.GetBranchPosition(System.String@)">
            <summary>
            This function provides the current browse position in the hierarchy.
            </summary>
            <param name="BranchPos">A pointer to a string which contains the fully qualified 
            path to the current BRANCH or LEAF (ItemID) browse position.</param>
            <returns>S_OK or S_FAIL</returns>
        </member>
        <member name="T:OPC.HRESULTS">
            <summary>
            HRESULTS enumerator. Defines the OPC error codes.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.S_OK">
            <summary>
            The server handled the call successfully.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.S_FALSE">
            <summary>
            The server handled the call successfully but there are error or warning indications 
            for some items. The error array has to be checked for individual item error codes.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDHANDLE">
            <summary>
            The value of the handle is invalid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_BADTYPE">
            <summary>
            The server cannot convert the data between the specified format and/or requested data 
            type and the canonical data type.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_PUBLIC">
            <summary>
            The requested operation cannot be done on a internal group.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_BADRIGHTS">
            <summary>
            The item's access rights do not allow the operation.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_UNKNOWNITEMID">
            <summary>
            The item ID is not defined in the server address space or no longer exists in the server address space.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDITEMID">
            <summary>
            The item ID does not conform to the server's syntax
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDFILTER">
            <summary>
            The filter string was not valid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_UNKNOWNPATH">
            <summary>
            The item's access path is not known to the server.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_RANGE">
            <summary>
            The value was out of range.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_DUPLICATENAME">
            <summary>
            The item's access path is not known to the server.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_UNSUPPORTEDRATE">
            <summary>
            The value was out of range.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_CLAMP">
            <summary>
            A value passed to write was accepted but the output was clamped.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_INUSE">
            <summary>
            The operation cannot be performed because the object is being referenced.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDCONFIGFILE">
            <summary>
            The server's configuration file is an invalid format.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_NOTFOUND">
            <summary>
            The requested object was not found.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALID_PID">
            <summary>
            The specified property ID is not valid for the item.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_NOTSUPPORTED">
            <summary>
            The requested feature is not supported.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_READONLY">
            <summary>
            The item is only readable.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDCONTINUATIONPOINT">
            <summary>
            The specified browse continuation point is invalid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_NOTIMPL">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_NOINTERFACE">
            <summary>
            No such interface supported.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_ABORT">
            <summary>
            Operation aborted.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_FAIL">
            <summary>
            The operation failed.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_OUTOFMEMORY">
            <summary>
            Out of memory.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.E_INVALIDARG">
            <summary>
            The value of one or more parameters was not valid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.CONNECT_E_NOCONNECTION">
            <summary>
            Unable to impersonate DCOM client.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.CONNECT_E_ADVISELIMIT">
            <summary>
            Advise limit exceeded for this object.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_BUSY">
            <summary>
            A refresh is currently in progress.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDBRANCHNAME">
            <summary>
            The string was not recognized as an area name.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDBUFFERTIME">
            <summary>
            The buffer time parameter was invalid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDMAXSIZE">
            <summary>
            The max size parameter was invalid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDTIME">
            <summary>
            The time does not match the latest active time.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_NOINFO">
            <summary>
            Information is not available.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_ALREADYACKED">
            <summary>
            The condition has already been acknowleged.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_MAXEXCEEDED">
            <summary>
            The maximum number of values requested exceeds the server's limit.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_NODATA">
            <summary>
            There is no data within the specified parameters.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_MOREDATA">
            <summary>
            There is more data satisfying the query than was returned
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDAGGREGATE">
            <summary>
            The aggregate requested is not valid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_CURRENTVALUE">
            <summary>
            The server only returns current values for the requested item attributes.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_EXTRADATA">
            <summary>
            Additional data satisfying the query was found.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_W_NOFILTER">
            <summary>
            The server does not support this filter.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_UNKNOWNATTRID">
            <summary>
            The server does not support this attribute.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_NOT_AVAIL">
            <summary>
            The requested aggregate is not available for the specified item.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDDATATYPE">
            <summary>
            The supplied value for the attribute is not a correct data type.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_DATAEXISTS">
            <summary>
            Unable to insert - data already present.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_INVALIDATTRID">
            <summary>
            The supplied attribute ID is not valid.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_E_NODATAEXISTS">
            <summary>
            The server has no value for the specified time and item ID.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_INSERTED">
            <summary>
            The requested insert occurred.
            </summary>
        </member>
        <member name="F:OPC.HRESULTS.OPC_S_REPLACED">
            <summary>
            The requested replace occurred.
            </summary>
        </member>
        <member name="M:OPC.HRESULTS.Failed(System.Int32)">
            <summary>
            The function returns true if the HRESULTS code is a failure code. 
            It returns false for S_OK or any success code such as S_FALSE.
            </summary>
            <param name="hresultcode">HRESULTS error/success code.</param>
            <returns>returns true if the HRESULTS code is an error code.</returns>
        </member>
        <member name="M:OPC.HRESULTS.Succeeded(System.Int32)">
            <summary>
             The function returns true if the HRESULTS code is a success code such as S_OK or S_FALSE.
            </summary>
            <param name="hresultcode">HRESULTS error/success code.</param>
            <returns>Returns TRUE if the HRESULTS code is S_OK aor any success code.</returns>
        </member>
        <member name="T:OPC.OPCException">
            <summary>
            Allows the exception handler to read the HResult error code.
            </summary>
        </member>
        <member name="M:OPC.OPCException.#ctor(System.Int32)">
            <summary>
            Throwse an exception of type OPCException with the HRESULT error code only
            </summary>
            <param name="rtc">HRESULT error code.</param>
        </member>
        <member name="M:OPC.OPCException.#ctor(System.Int32,System.String)">
            <summary>
            Throws an exception of type OPCException with the HRESULT error code and error message
            </summary>
            <param name="rtc">HRESULT error code.</param>
            <param name="emsg">Error descripotion.</param>
        </member>
        <member name="P:OPC.OPCException.Result">
            <summary>
            OPC error code.
            </summary>
        </member>
        <member name="P:OPC.OPCException.Message">
            <summary>
            Message with error information.
            </summary>
        </member>
        <member name="T:OPCHDA.OpcHDAServerBrowser">
            <summary>Support for browsing HDA 1.x servers on the local and remote computers.</summary>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.#ctor">
            <summary>
            Constructs a Server Browser for browsing the local computer using .Net Interop services.
            </summary>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.#ctor(System.String)">
            <summary>
            Constructs a Server Browser for browsing the named remote computer.
            </summary>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.#ctor(OPC.Common.Host)">
            <summary>
            Constructs a Server Browser for browsing the named remote computer, using the specified
            Domain, user and password.
            </summary>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.GetServerList(System.String[]@)">
            <summary>
                Get the names of the registerd OPC HDA 1.x servers. The ProgId of all servers is
                returned as a string array. This array can e.g. be directly displayed in a Windos
                control: 
                <example>
            		<para><u><em>VC# sample:</em><br/></u> string[] aProgIds;<br/>
                    OpcServerBrowser SrvList = new OpcServerBrowser(); SrvList.GetServerList( out
                    aProgId ); comboBoxServers.Items.AddRange( aProgId );</para>
            		<para><u><em>VB sample:</em><br/></u> Dim aProgIds As String()<br/>
                    Dim SrvList As New OpcServerBrowser()<br/>
                    SrvList.GetServerList(aProgIds)<br/>
                    comboBoxServers.Items.AddRange(aProgIds)</para>
            	</example>
            </summary>
            <param name="Servers">OUT:  ProgId of the enumerated OPC HDA V1.x servers</param>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.GetServerList(System.String[]@,System.Guid[]@)">
            <summary>
            Returns the ProgID and CLSID of all registerd OPC HDA 1.x servers.
            </summary>
            <param name="Servers"></param>
            <param name="ClsIDs"></param>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.GetServerList(System.Guid[],System.String[]@)">
            <summary>
            Get the names of the OPC servers registered with one of the categories
            listed in the CategoriesList parameter.
            The ProgId of all servers is returned as a string array.
            This array can e.g. be directly displayed in a Windos control:
            VC#:  comboBoxServers.Items.AddRange( ProgIdArr );
            VB:   comboBoxServers.Items.AddRange( ProgIdArr )
            </summary>
            <param name="catList">IN: Array with the Guid of each category to include.</param>
            <param name="Servers">OUT:  ProgId of the enumerated OPC DA V2 servers</param>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.GetServerList(System.Guid[],System.String[]@,System.Guid[]@)">
            <summary>
            Get the names of the OPC servers registered with one of the categories
            listed in the CategoriesList parameter.
            The ProgId of all servers is returned as a string array.
            This array can e.g. be directly displayed in a Windos control:
            VC#:  comboBoxServers.Items.AddRange( ProgIdArr );
            VB:   comboBoxServers.Items.AddRange( ProgIdArr )
            </summary>
            <param name="catList">IN: Array with the Guid of each category to include.</param>
            <param name="Servers">OUT:  ProgId of the enumerated OPC DA V2 servers</param>
            <param name="ClsIDs">OUT:  CLSID of the enumerated OPC DA V2 servers</param>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.EnumClassesOfCategories(System.Int32,System.Guid[],System.Int32,System.Guid[],System.Object@)">
            <summary>
            Enumerate the registered OPC servers.
            See OPC specs, chapter 'OPC Server Browser' for details
            </summary>
            <param name="catListLength"></param>
            <param name="catList"></param>
            <param name="reqListLenght"></param>
            <param name="reqList"></param>
            <param name="enumtemp"></param>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.GetClassDetails(System.Guid@,System.String@,System.String@)">
            <summary>
            Get the ProgId and user type or the server with the specified CLSID.
            See OPC specs, chapter 'OPC Server Browser' for details
            </summary>
            <param name="clsid">IN: CLSID of the OPC Server</param>
            <param name="progID">OUT: ProgId name of the server</param>
            <param name="userType">OUT: User type information</param>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.OpcHDAServerBrowser.CLSIDFromProgID(System.String,System.Guid@)">
            <summary>
            Get a server's CLSID from it's ProgId.
            See OPC specs, chapter 'OPC Server Browser' for details.
            </summary>
            <param name="progId">IN: ProdId name of the OPC server</param>
            <param name="clsid">OUT: CLSID of the server</param>
            <returns></returns>
        </member>
        <member name="T:OPCHDA.NET.OpcHDAServer">
            <summary>
            The OpcHDAServer class contains the functions as defined in the OPC AE Server object
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.#ctor">
            <summary>
            Constructor. Creates a new HDA server object in disconnected state. One of the Connect 
            methods need to be excuted to connect to the local or remote OPCHDA server.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.#ctor(System.Boolean)">
            <summary>
            Constructor. Creates a new HDA server object in disconnected state and optionally creates a AppID registry entry.<br/>
            One of the Connect methods need to be excuted to connect to the local or remote OPCHDA server.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.OpcHDAServer.CallbackHandler">
            <summary>
            Notification callback handler.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(System.String,System.String)">
            <summary>
            Connect to the named OPC Server on the named machine
            </summary>
            <param name="srvName">IN: Server ProgId name</param>
            <param name="computerName">IN: Computer network name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(System.String)">
            <summary>
            Connect to the named OPC Server on the named machine
            </summary>
            <param name="srvName">IN: Server ProgId name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(OPC.Common.Host,System.String)">
            <summary>
            Connect to the named remote OPC Server using the given access credentials.
            </summary>
            <param name="accessInfo">IN: Computer naame and optional passsword etc</param>
            <param name="srvName">IN: Server ProgId name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ConnectLocal(System.String)">
            <summary>
            Connect to the named local OPC Server
            </summary>
            <param name="srvName">IN: Server ProgId name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ConnectRemoteNIOS(System.String,System.String)">
            <summary>
            Connect to the named remote OPC Server using .Net Interop Services
            Must be used for OPC V1 servers
            </summary>
            <param name="computerName">IN: name of the remote computer</param>
            <param name="srvName">IN: Server ProgId name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(System.Guid)">
            <summary>
            Connect to the local OPC Server with the specified CLSID
            </summary>
            <param name="clsidOPCserver">IN: CLSID of the server</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(System.String,System.Guid)">
            <summary>
            Connect to the remote OPC Server with the specified CLSID
            </summary>
            <param name="computerName">IN: network computer name</param>
            <param name="clsidOPCserver">IN: CLSID of the server</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Connect(OPC.Common.Host,System.Guid)">
            <summary>
            Connect to the remote OPC Server with the specified CLSID using the given access credentials.
            </summary>
            <param name="accessInfo">IN: network computer access info</param>
            <param name="clsidOPCserver">IN: CLSID of the server</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Disconnect">
            <summary>
            Disconnect from the OPC server. The COM interface are released.
            All browser interfaces created for this server object are released.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.isConnected">
            <summary>
            Indicates if this server object is currently connected to the OPC server
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetItemAttributes(System.Int32[]@,System.String[]@,System.String[]@,System.Runtime.InteropServices.VarEnum[]@)">
            <summary>
            Depreciated.<br/>
            This synchronous function returns the item attributes supported by the server. The OPC defined attribute types are
            defined in specification section 5.2. Vendor specific attributes also are supported. The vendor supplied attributes are
            made available to allow the client to access and display vendor specific information. Attribute data
            types are intended to allow query filtering when browsing item ids. If no attributes are supported by
            the server, the function shall return a count of 0 and NULL pointers.
            </summary>
            <param name="attrID">The attribute identification index number.</param>
            <param name="attrName">OUT: The name of the attribute.</param>
            <param name="attrDesc">OUT: A description of the attribute.</param>
            <param name="attrDataType">OUT: The variant data type of the attribute.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetItemAttributes(System.Int32[]@,System.String[]@,System.String[]@,System.Type[]@)">
            <summary>
            This synchronous function returns the item attributes supported by the server. The OPC defined attribute types are
            defined in specification section 5.2. Vendor specific attributes also are supported. The vendor supplied attributes are
            made available to allow the client to access and display vendor specific information. Attribute data
            types are intended to allow query filtering when browsing item ids. If no attributes are supported by
            the server, the function shall return a count of 0 and NULL pointers.
            </summary>
            <param name="attrID">The attribute identification index number.</param>
            <param name="attrName">OUT: The name of the attribute.</param>
            <param name="attrDesc">OUT: A description of the attribute.</param>
            <param name="attrDataType">OUT: The .NET data type of the attribute.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetAggregates(System.Int32[]@,System.String[]@,System.String[]@)">
            <summary>
            This synchronous function returns the list of aggregates supported by the server. The OPC defined aggregates are
            defined in specification section 5.3.3. Vendor specific aggregates also are supported. The vendor supplied
            aggregates are made available to allow the client to use all the functions available to their specific
            server. If no aggregates are supported, the function shall return a count of 0 and NULL pointers.
            </summary>
            <param name="aggrID">OUT: The aggregate identification index number.</param>
            <param name="aggrName">OUT: The name of the aggregate.</param>
            <param name="aggrDesc">OUT: A description of the aggregate.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetHistorianStatus(OPCHDA.NET.StatusInfo@)">
            <summary>
            This synchronous function returns the information on the current status of the server. The start time is optional and
            may be returned as a NULL pointer.
            </summary>
            <param name="stat">OUT: Returned status info.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetItemHandles(System.String[],System.Int32[],System.Int32[]@,System.Int32[]@)">
            <summary>
            Given a list of ItemIDs and client handles, this function returns the server handles for each item. The
            returned server handles must be used in all requests to read or update history. The supplied client
            handles are included in the returns of all read and update requests.
            </summary>
            <param name="itemID">An array of strings that uniquely identify the OPC HDA items.</param>
            <param name="client">The handle of the client to be associated with the item.</param>
            <param name="server">OUT: The returned handle of the server used to refer to this item.</param>
            <param name="errors">OUT: The status of association of the client to the server.</param>
            <returns>S_OK, S_FALSE, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReleaseItemHandles(System.Int32[],System.Int32[]@)">
            <summary>
            This synchronous function releases associations between server handles and client handles for specific HDA items.
            </summary>
            <param name="server">The server handles of the items to be released.</param>
            <param name="errors">OUT: The status of operations.</param>
            <returns>S_OK, S_FALSE, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ValidateItemIDs(System.String[],System.Int32[]@)">
            <summary>
            This synchronous function validates that specific HDA item IDs are known to the server.
            </summary>
            <param name="itemID">An array of null terminated strings that uniquely identify the OPC HDA items.</param>
            <param name="errors">OUT: The status of validation.</param>
            <returns>S_OK, S_FALSE, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CreateBrowse(System.Int32[],OPCHDA.NET.OPCHDA_OPERATORCODES[],System.String[],OPCHDA.NET.OPCHDABrowser@,System.Int32[]@)">
            <summary>
            DEPRECIATED!   
            This synchronous function creates a new OPCHDA_BROWSER object. The filters will be applied to all 
            method calls to this instance of the browser. The server is expected to validate the filter 
            arrays. The server must support a single client having simultaneous access to multiple browse 
            interfaces. Filtering is optional behavior for a server. If a server does not support filtering, 
            or only supports filtering on some of the requested attributes, the server shall return an 
            interface to a browser which is only filtered on the accepted attributes. A server which does 
            not support filtering shall return a pointer to an unfiltered browser interface. Filter 
            operations are additive. To successfully pass filter criteria, the item must successfully 
            satisfy all of the filter criteria. Implementation of filtering and browsing is server specific, 
            however it is anticipated that servers with hierarchical name spaces may only apply filters to 
            leaves, causing them to return branches which have no leaves which satisfy the criteria. It is 
            anticipated that a client may create one browser to locate a particular area of the hierarchy, 
            obtain a fully qualified branch name using GetBranchPosition, then pass that branch name to 
            another browser which is using a different filter set. Servers may optionally support wild 
            cards for string filters. To represent a single character the “?” shall be used. To represent 
            multiple characters the “*” shall be used.
            </summary>
            <param name="attrID">The filter attribute IDs.</param>
            <param name="operators">The filter operators.</param>
            <param name="filter">The filter values.</param>
            <param name="errors">OUT: Reports the validity of the filtering inputs.</param>
            <param name="browser">OUT: Created browser object</param>
            <returns>S_OK, OPC_W_NOFILTER, OPC_E_UNKNOWNATTRID, OPC_E_INVALIDDATATYPE, E_INVALIDARG, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CreateBrowse(OPCHDA.NET.BrowseFilter[],OPCHDA.NET.OPCHDABrowser@,System.Int32[]@)">
            <summary>
            This synchronous function creates a new OPCHDA_BROWSER object. The filters will be applied to all 
            method calls to this instance of the browser. The server is expected to validate the filter 
            arrays. The server must support a single client having simultaneous access to multiple browse 
            interfaces. Filtering is optional behavior for a server. If a server does not support filtering, 
            or only supports filtering on some of the requested attributes, the server shall return an 
            interface to a browser which is only filtered on the accepted attributes. A server which does 
            not support filtering shall return a pointer to an unfiltered browser interface. Filter 
            operations are additive. To successfully pass filter criteria, the item must successfully 
            satisfy all of the filter criteria. Implementation of filtering and browsing is server specific, 
            however it is anticipated that servers with hierarchical name spaces may only apply filters to 
            leaves, causing them to return branches which have no leaves which satisfy the criteria. It is 
            anticipated that a client may create one browser to locate a particular area of the hierarchy, 
            obtain a fully qualified branch name using GetBranchPosition, then pass that branch name to 
            another browser which is using a different filter set. Servers may optionally support wild 
            cards for string filters. To represent a single character the “?” shall be used. To represent 
            multiple characters the “*” shall be used.
            </summary>
            <param name="filter">The filter definitions.</param>
            <param name="errors">OUT: Reports the validity of the filtering inputs.</param>
            <param name="browser">OUT: Created browser object</param>
            <returns>S_OK, OPC_W_NOFILTER, OPC_E_UNKNOWNATTRID, OPC_E_INVALIDDATATYPE, E_INVALIDARG, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadRaw(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Boolean,System.Int32[],OPCHDA.NET.OPCHDAitem[]@,System.Int32[]@)">
            <summary>
            This synchronous function reads the values, qualities, and timestamps from the history database for the specified
            time domain for one or more items. When 'bounds' is TRUE, the bounding values for the time domain
            are returned. This function is intended for use by clients wanting the actual data saved within the
            historian. The actual data may be compressed or may be all data collected for the item depending on
            the historian and the storage rules invoked when the item values were saved. The optional bounding
            values are provided to allow clients to interpolate values for the start and end times when trending the
            actual data on a display.
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The time domain of the request is defined by <em>StartTime</em>,
                <em>EndTime</em>, and <em>NumValues</em>; at least two of these must be specified.
                If <em>EndTime</em> is less than <em>StartTime</em>, or <em>EndTime</em> and
                <em>NumValues</em> alone are specified, the data will be returned in reverse order,
                with later data coming first. If all three are specified, the call shall return up
                to <em>numValues</em> results going from <em>startTime</em> to <em>EndTime</em>, in either
                ascending or descending order depending on the relative values of
                <em>StartTime</em> and <em>EndTime</em>.<br/>
                If <em>numValues</em> is 0, then all the values in the range are returned. A null
                value for OPCHDAtime (see specification section 5.3.4) is used to indicate
                <em>StartTime</em> or <em>EndTime</em> is not specified. If either
                <em>StartTime</em> or <em>EndTime</em> is given in string (relative) format, the
                absolute time of the OPCHDAtime structure (time) shall be set to the DateTime which
                the relative time was translated to by the server.</para>
            	<para>It is specifically allowed for the <em>StartTime</em> and the
                <em>EndTime</em> to be identical. This allows the client to request just one value.
                It is specifically not allowed for the server to return E_INVALIDARG if the
                requested time domain is outside of the server's range. Such a case shall be
                treated as an interval in which no data exists.</para>
            	<para><strong>If more than <em>numValues</em> results exist within that time range, the
                <em>Errors</em> entry for that ItemID shall be OPC_S_MOREDATA. When OPC_S_MOREDATA
                is returned, clients wanting the next <em>numValues</em> values should call ReadRaw again
                with the timestamp of the oldest value returned for the item as the new <em>startTime</em>
                and the original value of <em>EndTime</em> unchanged (reverse <em>StartTime</em>
                and <em>EndTime</em> if reverse order is needed). Note that the second call will
                return a duplicate of the last value in the previous call.</strong></para>
            	<para>If bounding values are requested and a non-zero <em>numValues</em> was
                specified, any bounding values returned are included in the <em>numValues</em>
                count. If <em>numValues</em> is 1, then only the start bound is returned (the End
                bound if reverse order is needed).</para>
            	<para>If <em>numValues</em> is 2, then the data point, and the start bound is
                returned (the End bound if reverse order is needed). When bounding values are
                requested and no bounding value is found, the corresponding array elements in the
                <em>itemValues</em> will have a quality of OPCHDA_NOBOUND, a timestamp equal to the
                start or end time, as appropriate, and a VARIANT with a value of VT_EMPTY. How far
                back or forward to look in history for bounding values is server dependent.</para>
            	<para>For cases where only one of <em>StartTime</em> or <em>EndTime</em>, and a
                non-zero <em>numValues</em> is specified, then the last value in history is
                considered the End bound (the Start bound if reverse order is needed).</para>
            	<para>For an interval in which no data exists, if bounding values are not requested
                or are not found, the corresponding <em>error</em>s shall be OPC_S_NODATA, and the
                OPCHDAItem shall have a <em>count</em> of 0. If bounding values are requested and
                one or both exist, the <em>Error</em> return is S_OK and the bounding value(s) are
                returned. And, of course, if any Error code is not S_OK, the HRESULT
                returned to the client must be S_FALSE.</para>
            </remarks>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="numValues">The maximum number of values returned for any item
            over the time range. If only one time is specified, the
            time range must extend to return this number of values.</param>
            <param name="bounds">True if bounding values should be returned.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="itemValues">OUT: Array of structures in which the item values are
            returned. The order of the structures in the array shall
            be the same as the order of the server item handles.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. The errors correspond to the
            handles passed in phServer. This indicates whether the
            read succeeded in obtaining a defined value, quality
            and timestamp. NOTE that any FAILED error code
            indicates that the corresponding OPCHDA_ITEM struct is undefined. 
            </param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadProcessed(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.TimeSpan,System.Int32[],System.Int32[],OPCHDA.NET.OPCHDAitem[]@,System.Int32[]@)">
            <summary>
            This synchronous function computes aggregate values, qualities, and timestamps from data in
            the history database for the specified time domain for one or more items. The time
            domain is divided into subintervals of duration resampleInterval. The specified
            aggregate is calculated for each subinterval beginning with <em>startTime</em> by using
            the data within the next <em>resampleInterval</em>. This function is intended to
            provide values calculated with respect to the resample interval. For example, this
            function can provide hourly statistics such as Maximum, Minimum, Average, etc. for each
            item during the specified time domain when resampleInterval is 1 hour.
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The domain of the request is defined by <em>startTime</em>, <em>endTime</em>,
                and <em>resampleInterval</em>. If <em>startTime</em> or <em>endTime</em> is given
                in string (relative) format, the value returned shall be the DateTime to which that
                value was translated by the server. All three must be specified. If
                <em>endTime</em> is less than <em>startTime</em>, the data shall be returned in
                reverse order, with later data coming first. If s<em>tartTime</em> and
                e<em>ndTime</em> are the same, the server shall return E_INVALIDARG, as there is no
                meaningful way to interpret such a case.</para>
            	<para>The values used in computing the aggregate for each subinterval shall include
                any value that falls exactly on the timestamp beginning the subinterval, but shall
                not include any value that falls directly on the timestamp ending the subinterval.
                Thus, each value shall be included only once in the calculation. If the time domain
                is in reverse order, we consider the later timestamp to be the one beginning the
                subinterval, and the earlier timestamp to be the one ending it. Note that this
                means that simply swapping the start and end times will not result in getting the
                same values back in reverse order, as the subintervals being requested in the two
                cases are not the same.</para>
            	<para>If the last subinterval computed is not a complete subinterval (the time
                domain of the request is not evenly divisible by the resample interval), the last
                aggregate returned shall be based upon that incomplete subinterval, and the quality
                of the aggregate shall be OPCHDA_PARTIAL. For MinimumActualTime and
                MaximumActualTime, if more than one instance of the value exists within a
                subinterval, which instance (time stamp) of the value returned is server dependent.
                In any case, the server may set the OPCHDA_EXTRADATA quality flag to let the caller
                know that there are other timestamps with that value. To obtain multiple aggregates
                for the same item, include the server item handle in the list of items for each
                desired aggregate.</para>
            	<para>If <em>resampleInterval</em> is 0, the server shall create one aggregate
                value for the entire time range. This allows aggregates over large periods of time.
                A value with a timestamp equal to <em>endTime</em> will be excluded from that
                aggregate, just as it would be excluded from a subinterval with that ending time.
                The timestamp returned with the aggregate shall be the time at the beginning of the
                interval, except where the aggregate specifies a different value. Also, the quality
                returned with the aggregate shall be GOOD (see the OPC Data Access Standard) if all
                values upon which the aggregate is based have a quality of GOOD. If any of those
                values have any other quality, the quality of the aggregate shall be Sub-Normal
                (0x010110xx).</para>
            	<para>If no data exists for a given Item in any subinterval in the time domain, the
                server shall return OPC_S_NODATA in the <em>errors</em> array for that Item, and
                the corresponding <em>itemValues</em> structure shall have a <em>count</em> of 0.
                If data does exist in at least one subinterval for that item, the server shall
                return a timestamp, quality, and value for each subinterval in the time domain. For
                each subinterval for which there is no data, the server shall return a value of
                VT_EMPTY and a quality of OPCHDA_NODATA for that subinterval, with the appropriate
                timestamp. If the timestamp for the aggregate is based upon the data, the timestamp
                returned for OPCHDA_NODATA shall be that of the beginning of the interval.</para>
            	<para>Note: Vendor-defined aggregates may have different behavior with respect to
                whether trailing edge values are included in a subinterval. It is expected that
                server vendors will document the behavior of their vendor-specific aggregates
                clearly so that clients will know what values are included in each
                aggregate.</para>
            </remarks>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read. </param>
            <param name="resampleInterval">Interval between returned values.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="aggregates">The calculation to be performed on the raw data to
            create the values to be returned.</param>
            <param name="itemValues">OUT: Array of structures in which the item values are
            returned. The order of the structures in the array shall
            be the same as the order of the server item handles.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. The errors correspond to the
            handles passed in <em>server</em>. This indicates whether the
            read succeeded in obtaining defined values, qualities
            and timestamps. NOTE any FAILED error code
            indicates that the contents of the corresponding OPCHDA_ITEM structure are UNDEFINED.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAtTime(System.DateTime[],System.Int32[],OPCHDA.NET.OPCHDAitem[]@,System.Int32[]@)">
            <summary>
            This synchronous function reads the values and qualities from the history database for the specified timestamps for
            one or more items. This function is intended to provide values to correlate with other values with a
            known timestamp. For example, the values of sensors when lab samples were collected.
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The order of the values and qualities returned shall match the order of the
                time stamps supplied in the request.</para>
            	<para>When no value exists for a specified timestamp, a value shall be interpolated
                from the surrounding values to represent the value at the specified
                timestamp.</para>
            	<para>The interpolation will follow the same rules as the standard Intpolated
                aggregate as outlined in specification Section 2.9 The OPCHDAitem structure will
                return OPCHDA_NOAGGREGATE in the <em>aggregate</em> field. If a value is found for
                the specified timestamp, the server will set the OPCHDA_RAW bit in the quality. If
                the value is interpolated from the surrounding values, the server will set the
                OPCHDA_INTERPOLATED bit in the quality.</para>
            </remarks>
            <param name="timeStamps">The timestamps for the requested data.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="itemValues">OUT: Array of structures in which the item values are
            returned. The order of the structures in the array shall
            be the same as the order of the server item handles.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. The errors correspond to the
            handles passed in <em>server</em>. This indicates whether the
            read succeeded in obtaining a defined value, quality
            and timestamp. NOTE that any FAILED error code
            indicates that the corresponding OPCHDAitem struct is undefined.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadModified(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Int32[],OPCHDA.NET.OPCHDAmodifiedItem[]@,System.Int32[]@)">
            <summary>
            	<para>This synchronous function reads the values, qualities, timestamps, user ID, and timestamp
                of the modification from the history database for the specified time domain for one
                or more items.</para>
            	<para>The purpose of this function is to read values from history that have been
                modified/replaced. If ReadRaw, ReadProcessed, or ReadAtTime has returned a quality
                of OPCHDA_EXTRADATA, indicating that there are values which have been superseded,
                this function reads those values which were superseded.</para>
            	<para>Only values that have been modified/replaced or deleted are read by this
                function.</para>
            </summary>
            <returns>S_OK, OPC_E_BADRIGHTS, OPC_E_INVALIDHANDLE, OPC_S_NODATA, OPC_S_MOREDATA,
             E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The domain of the request is defined by <em>startTime</em>, <em>endTime</em>,
                and <em>numValues</em>; at least two of these must be specified.</para>
            	<para>If <em>endTime</em> is less than <em>startTime</em>, or <em>endTime</em> and
                <em>numValues</em> alone are specified, the data shall be returned in reverse
                order, with later data coming first. If all three are specified, the call shall
                return up to <em>numValues</em> results going from <em>startTime</em> to
                e<em>ndTime</em>, in either ascending or descending order depending on the relative
                values of <em>startTime</em> and <em>endTime</em>.</para>
            	<para>If more than <em>numValues</em> results exist within that time range, the
                <em>errors</em> entry for that ItemID shall be OPC_S_MOREDATA.</para>
            	<para>If <em>numValues</em> is 0, then all the values in the range are
                returned.</para>
            	<para>If a value has been modified multiple times, all values for the time are
                returned. This means that a timestamp can appear in the array more than once. The
                order of the returned values with the same timestamp should be from most recent to
                oldest modified value. It is server dependent whether multiple modifications are
                kept or only the most recent.</para>
            </remarks>
            <param name="startTime">The beginning of the history period to be read. </param>
            <param name="endTime">The end of the history period to be read. </param>
            <param name="numValues">The maximum number of values returned for any item
            over the time range. If only one time is specified, this
            number specifies the extent of the time range.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="itemValues">OUT: Array of structures in which the item values are
            returned. The order of the structures in the array shall
            be the same as the order of the server item handles.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. The errors correspond to the
            handles passed in <em>server</em>. This indicates whether the
            read succeeded in obtaining a defined value, quality
            and time stamp. NOTE that any FAILED error code
            indicates that the corresponding
            OPCHDA_MODIFIEDITEM struct is undefined.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAttribute(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Int32[],OPCHDA.NET.OPCHDAattribute[]@,System.Int32[]@)">
            <summary>
            	<para>This synchronous function reads the attribute values and timestamps from the history
                database for the specified time domain for an item.</para>
            	<para>If the current values for the attributes are desired, <em>startTime</em>
                shall be set to "NOW" and <em>endTime</em> shall be null (Nothing). <br/>
                This function is intended to be used to retrieve attributes that have changed to correlate the
                values of these attributes with the values of their data. For example, the
                recalibration of a sensor may have required the normal maximum and minimum
                attributes to be changed.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_INVALIDHANDLE, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>If the only attribute values available for the item are the current values,
                these shall be returned and the <em>error</em> set to OPC_S_CURRENTVALUE.</para>
            	<para>Except for the case where current values are requested (<em>startTime</em> =
                NOW, <em>endTime</em> = null (Nothing)), the server shall always return a beginning
                bounding value. Thus, if the client requests attribute values for Jan 1, 1997 to
                October 1, 1997, the server shall return a value for the attribute on Jan 1, 1997,
                rather than the first value returned being the first new value for the attribute
                after Jan 1, 1997.</para>
            	<para>Likewise, the timestamp for that first value shall be Jan 1, 1997, regardless
                of when the attribute actually took that value. All other timestamps shall be for
                the time when the value of the attribute changed.</para>
            	<para>Note that while the client can query the server for the native datatype of an
                ItemID, the client cannot assume that all data sent from the server will be that
                datatype. The datatype of a given ItemID may have changed over the life of the
                Item, and thus clients should be able to handle receiving data of a different
                datatype than that returned from this call.</para>
            </remarks>
            <param name="startTime">The beginning of the attribute read period.</param>
            <param name="endTime">The end of the attribute read period. </param>
            <param name="handleServer">The server item handle for the item to be read.</param>
            <param name="attributeIDs">The list of attribute IDs to be read.</param>
            <param name="attrValues">OUT: Array of structures in which the item attribute values
            are returned. The order of the structures in the array
            shall be the same as the order of attribute IDs.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual attribute reads. The errors correspond to the
            attribute IDs passed in dwAttributeIDs. This indicates
            whether the read succeeded in obtaining a defined
            value for the requested attribute. NOTE any FAILED
            error code indicates that the corresponding attribute
            value is UNDEFINED.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.OPCHDA_UPDATECAPABILITIES@)">
            <summary>
            	<para>This synchronous function specifies the update methods that the server supports.</para>
            	<para>It returns an enumerator as falsely defined in the specification, allowing
                only the indication of one capability. There is a method overload returning a bit
                mask.</para>
            </summary>
            <returns>S_OK, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="capabilities">OUT: The methods supported by the interface.</param>
            <overloads>
            public int QueryCapabilities( out UpdateCapabilities capabilities )
            </overloads>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.UpdateCapabilities@)">
            <summary>
            	<para>This synchronous function specifies the update methods that the server supports.</para>
            	<para>It returns a bit mask allowing the server to indicate multiple capabilities.
                The specification falsely defines an enumerator result. The method overload to use
                depends on the server.</para>
            </summary>
            <returns>S_OK, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <overloads>
            	<para>xxxxx</para></overloads>
            <param name="capabilities">OUT: The methods supported by the interface.</param>
            <overloads>
            public int QueryCapabilities( out OPCHDA_UPDATECAPABILITIES capabilities )
            </overloads>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function inserts values and qualities into the history database at the
                specified timestamps for one or more items. If a value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>errors</em> shall
                indicate an error.</para>
            	<para>This function is intended to insert new values at the specified timestamps;
                e.g., the insertion of lab data to reflect the time of data collection.</para>
            </summary>
            <returns>S_OK, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To insert a value for a number of different items at a single time, then
                <em>fimeStamp</em> array would have the same time for each item.</para>
            	<para>To insert a stream of values, timestamps and qualities for a single item, set
                the size of the item array to the number of values to be inserted and put the same
                ItemID in each element.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be inserted.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the insert succeeded.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Replace(System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function replaces the values and qualities in the history database at
                the specified timestamps for one or more items.</para>
            	<para>If no value exists at the specified timestamp, the new value shall not be
                inserted; instead <em>errors</em> shall indicate an error.</para>
            	<para>This function is intended to replace existing values at the specified
                timestamp; e.g., correct lab data that was improperly processed, but inserted into
                the history database.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To replace the values for a number of different items at a single time, then
                <em>timeStamp</em> array would have the same time for each item. To replace a
                stream of values, timestamps and qualities for a single item, set the size of the
                item array to the number of values to be replaced and put the same ItemID in each
                element.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be replaced.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the edit
            succeeded in replacing a defined value, quality and
            timestamp.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.InsertReplace(System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function inserts or replaces values and qualities in the history
                database for the specified timestamps for one or more items.</para>
            	<para>If the item has a value at the specified timestamp, the new value and quality
                will replace the old one.</para>
            	<para>If there is no value at that timestamp, the function will insert the new
                data. The function runs to completion before returning.</para>
            	<para>This function is intended to unconditionally insert/replace values and
                qualities; e.g., correction of values for bad sensors.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To set values and qualities for a number of different items at a single time,
                then <em>fimeStamp</em> array would have the same time for each item.</para>
            	<para>To set a stream of values, timestamps and qualities for a single item, set
                the size of the item array to the number of values to be inserted/replaced and put
                the same ItemID in each element. S_OK as a <em>error</em> return code for an
                individual value is allowed when the HDA server is unable to say whether there was
                already a value at that timestamp.</para>
            	<para>If the HDA server can determine whether the new value replaces a value that
                was already there, it should use OPC_S_INSERTED or OPC_S_REPLACED to return that
                information.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be edited.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the edit
            succeeded in inserting/replacing a defined value,
            quality and timestamp.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function inserts values and qualities into the history database at the
                specified timestamps for one or more items. If a value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>errors</em> shall
                indicate an error.</para>
            	<para>This function is intended to insert new values at the specified timestamps;
                e.g., the insertion of lab data to reflect the time of data collection.</para>
            </summary>
            <returns>S_OK, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To insert a value for a number of different items at a single time, then
                <em>fimeStamp</em> array would have the same time for each item.</para>
            	<para>To insert a stream of values, timestamps and qualities for a single item, set
                the size of the item array to the number of values to be inserted and put the same
                ItemID in each element.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be inserted.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the insert succeeded.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Replace(System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function replaces the values and qualities in the history database at
                the specified timestamps for one or more items.</para>
            	<para>If no value exists at the specified timestamp, the new value shall not be
                inserted; instead <em>errors</em> shall indicate an error.</para>
            	<para>This function is intended to replace existing values at the specified
                timestamp; e.g., correct lab data that was improperly processed, but inserted into
                the history database.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To replace the values for a number of different items at a single time, then
                <em>timeStamp</em> array would have the same time for each item. To replace a
                stream of values, timestamps and qualities for a single item, set the size of the
                item array to the number of values to be replaced and put the same ItemID in each
                element.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be replaced.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the edit
            succeeded in replacing a defined value, quality and
            timestamp.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.InsertReplace(System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function inserts or replaces values and qualities in the history
                database for the specified timestamps for one or more items.</para>
            	<para>If the item has a value at the specified timestamp, the new value and quality
                will replace the old one.</para>
            	<para>If there is no value at that timestamp, the function will insert the new
                data. The function runs to completion before returning.</para>
            	<para>This function is intended to unconditionally insert/replace values and
                qualities; e.g., correction of values for bad sensors.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <remarks>
            	<para>The <em>server</em>, <em>timeStamps</em>, <em>values</em> and
                <em>qualities</em> are arrays of equal size.</para>
            	<para>To set values and qualities for a number of different items at a single time,
                then <em>fimeStamp</em> array would have the same time for each item.</para>
            	<para>To set a stream of values, timestamps and qualities for a single item, set
                the size of the item array to the number of values to be inserted/replaced and put
                the same ItemID in each element. S_OK as a <em>error</em> return code for an
                individual value is allowed when the HDA server is unable to say whether there was
                already a value at that timestamp.</para>
            	<para>If the HDA server can determine whether the new value replaces a value that
                was already there, it should use OPC_S_INSERTED or OPC_S_REPLACED to return that
                information.</para>
            </remarks>
            <param name="server">The list of server item handles for the items to be edited.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the new item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item. The errors correspond to the handles
            passed in <em>server</em>. This indicates whether the edit
            succeeded in inserting/replacing a defined value,
            quality and timestamp.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.DeleteRaw(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function deletes the values, qualities, and timestamps from the history
                database for the specified time domain for one or more items.</para>
            	<para>This function is intended to be used to delete data that has been
                accidentally entered into the history database; e.g., deletion of data from a
                source with incorrect timestamps.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <remarks>
            If no data is found in the time range for a particular item, a success status of S_FALSE is returned and
            the error code for that item is OPC_S_NODATA.
            </remarks>
            <param name="startTime">The beginning of the history period to be deleted.</param>
            <param name="endTime">The end of the history period to be deleted. </param>
            <param name="server">The list of server item handles for the items to be deleted.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item deletes. The errors correspond to the
            handles passed in <em>server</em>. This indicates whether the
            delete succeeded in removing the specified items.
            NOTE: any FAILED error code indicates that the
            corresponding item was not completely deleted.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.DeleteAtTime(System.Int32[],System.DateTime[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function deletes the values and qualities in the history database for
                the specified timestamps for one or more items.</para>
            	<para>This function is intended to be used to delete specific data from the history
                database; e.g., lab data that is incorrect and cannot be correctly
                reproduced.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_FAIL</returns>
            <param name="server">The list of server item handles for the items to be deleted.</param>
            <param name="timeStamps">The timestamps for the data to be deleted.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item deletes. The errors correspond to the
            timestamps passed in <em>server</em>.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.OPCHDA_ANNOTATIONCAPABILITIES@)">
            <summary>
            	<para>This synchronous function specifies which update methods the server supports. It is a
                required method for all servers which support the OPCHDA SyncAnnotations
                interface.</para>
            	<para>This overload return an enum enumerator as falsely defined in the
                specification.</para>
            </summary>
            <returns>S_OK or E_FAIL</returns>
            <param name="capabilities">OUT: The methods supported by the interface.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.AnnotationCapabilities@)">
            <summary>
            	<para>This synchronous function specifies which update methods the server supports. It is a
                required method for all servers which support the OPCHDA SyncAnnotations
                interface.</para>
            	<para>This overload return a bit map allowing the server to indicate multiple
                capabilities. The specification falsely defines an enumerator.</para>
            </summary>
            <returns>S_OK or E_FAIL</returns>
            <param name="capabilities">OUT: The methods supported by the interface.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAnnotations(OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32[],OPCHDA.NET.OPCHDAannotation[]@,System.Int32[]@)">
            <summary>
            	<para>This synchronous function reads the annotations from the history database in the
                specified time domain for the specified item IDs.</para>
            	<para>This function is intended to read annotations for an item at specified
                timestamps.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The time domain of the request is defined by <em>startTime</em> and
                <em>endTime</em>. If <em>endTime</em> is less than <em>startTime</em> the data
                shall be returned in reverse order, with later data coming first.</para>
            	<para>If either <em>startTime</em> or <em>endTime</em> is given in string
                (relative) format, the absolute time of the OPCHDAtime structure (<em>time</em>)
                shall be set to the dateTime which the relative time was translated to by the
                server. OPC_S_NODATA is returned only if no annotations exist over the time
                domain.</para>
            </remarks>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read. </param>
            <param name="server">The list of server item handles for the annotation items to be read.</param>
            <param name="annotationValues">OUT: Array of structures in which the annotation values are
            returned. The order of the structures in the array shall
            be the same as the order of server item handles.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual annotation reads. The errors correspond to
            the handles passed in <em>server</em>. This indicates whether
            the read succeeded in obtaining a defined annotation
            item. NOTE any FAILED error code indicates that the
            corresponding Annotation structure is undefined.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32[],System.DateTime[],OPCHDA.NET.OPCHDAannotation[],System.Int32[]@)">
            <summary>
            	<para>This synchronous function inserts annotations into the history database.</para>
            	<para>This function is intended to insert annotations by users to document
                observations for a value at a specified timestamp.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="server">The list of server item handles for the annotation items
            to be inserted.</param>
            <param name="timeStamps">Array of time stamps for the annotations to be inserted.</param>
            <param name="annotationValues">Array of structures containing the annotation values to
            be inserted.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual annotation inserts. The errors correspond to
            the handles passed in <em>server</em>.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadRaw(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Boolean,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function <strong>asynchronously</strong> reads the values, qualities,
                and timestamps from the history database for the specified time domain for one or
                more items.</para>
            	<para>When bBounds is TRUE, the bounding values for the time domain are returned.
                This function is intended for use by clients wanting the actual data saved within
                the historian.</para>
            	<para>The actual data may be compressed or may be all data collected for the item
                depending on the historian and the storage rules invoked when the item values were
                saved. The optional bounding values are provided to allow clients to interpolate
                values for the start and end times when trending the actual data on a
                display.</para>
            	<para>The results are returned via the client's ReadComplete event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The time domain of the request is defined by <em>startTime</em> and <em>endTime</em>. If
                <em>endTime</em> is less than <em>startTime</em>, the data shall be returned in reverse order,
                with later data coming first.</para>
            	<para>Unlike the synchronous method, if <em>numValues</em> is non-zero, the function
                continues sending data in blocks of size <em>numValues</em> until all requested data has
                been sent.</para>
            	<para>The CancelID can be used to cancel the request. If either <em>startTime</em> or
                <em>endTime</em> is given in string (relative) format, the absolute time of the
                OPCHDA_TIME structure (<em>time</em>) shall be set to the DateTime which the relative time
                was translated to by the server. A null value for OPCHDAtime (see specification section 5.3.4)
                is used to indicate <em>startTime</em> or <em>endTime</em> is not specified.</para>
            	<para>The callback shall contain data for all ItemIDs in the request except those
                for which a FAILED error code was returned. See the discussion at
                IOPCHDA_SyncRead:ReadRaw for specifics of what a server should return to the client
                in various situations.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="numValues">The maximum number of values returned for any item
            over the time range. If only one time is specified, the
            time range must extend to return this number of values.</param>
            <param name="bounds">True if bounding values should be returned.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.AdviseRaw(System.Int32,OPCHDA.NET.OPCHDAtime@,System.TimeSpan,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function reads the values, qualities, and timestamps from the history
                database from the specified start time at the update interval for one or more
                items.</para>
            	<para>This function is intended to be used to update the client software with new
                data as it becomes available; e.g., update a trend with new data on a periodic
                basis.</para>
            	<para>The results are returned via the client's DataChange event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_S_UNSUPPORTEDRATE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The request will be for all data from the <em>startTime</em> into the future,
                as it is collected, reported at the rate specified by the
                <em>updateInterval</em>.</para>
            	<para>Reporting will continue until the request is canceled. Caution should be used
                in specifying start times prior to the present, as data which is already available
                will be returned unthrottled, with <em>updateInterval</em> worth of data in each
                response. Once all data which has already been collected has been sent, new data
                will be sent for every <em>updateInterval</em>.</para>
            	<para>If there is no new data, the server shall still send a response with an entry
                for each Item, with a zero dwCount and a <em>error</em>s code of OPC_S_NODATA
                for any item for which there was no data. This way a client can be sure that the
                interval has been processed.</para>
            	<para>This function uses the <em>updateInterval</em> to throttle the rate of data
                return. No annotations will be identified in an advise. See the discussion at
                ReadRaw for specifics of what a server should return to the client in various
                situations.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="updateInterval">Update interval to send new data</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadProcessed(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.TimeSpan,System.Int32[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function computes aggregate values, qualities, and timestamps from data
                in the history database for the specified time domain for one or more items.</para>
            	<para>The time domain is divided into subintervals of duration
                <em>resampleInterval</em>. The specified <em>aggregate</em> is calculated for each
                subinterval beginning with <em>startTime</em> by using the data within the next
                <em>resampleInterval</em>.</para>
            	<para>This function is intended to provide values calculated with respect to the
                resample interval. For example, this function can provide hourly statistics such as
                Maximum, Minimum, Average, et. al. for each item during the specified time domain
                when <em>resampleInterval</em> is 1 hour.</para>
            	<para>The results are returned via the client's ReadComplete event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            The domain of the request is defined by <em>startTime</em>, <em>endTime</em>, and htResampleInterval. If
            <em>startTime</em> or <em>endTime</em> is given in string (relative) format, the value returned shall be the
            DateTime to which that value was translated by the server. All three must be specified. If <em>endTime</em>
            is less than <em>startTime</em>, the data shall be returned in reverse order, with later data coming first.
            For MinimumActualTime and MaximumActualTime, if more than one instance of the value exists
            within a subinterval, which instance (time stamp) of the value is returned is server dependent. In any
            case, the server may set the OPCHDA_EXTRADATA quality flag to let the caller know that there are
            other timestamps with that value.
            If htResampleInterval is 0, the server shall create one aggregate value for the entire time range. This
            allows aggregates over large periods of time.
            See the discussion at ReadProcessed for specifics of what a server should
            return to the client in various situations.
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="resampleInterval">Interval between returned values.</param>
            <param name="server">The list item handles for the items to be read from the server.</param>
            <param name="aggregates">The list of aggregate values to be returned.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.AdviseProcessed(System.Int32,OPCHDA.NET.OPCHDAtime@,System.TimeSpan,System.Int32[],System.Int32[],System.Int32,System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function computes the aggregate values, qualities, and timestamps from
                the history database from the specified start time at the interval for one or more
                items.</para>
            	<para>This function is intended to be used to update the client software with new
                data as it becomes available; e.g., update a trend with new data on a periodic
                basis.</para>
            	<para>The results are returned via the client's DataChange event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_S_UNSUPPORTEDRATE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The request will be for all data from the <em>startTime</em> into the future,
                as it is collected, reported at the rate specified by: (<em>numIntervals</em>*
                <em>resampleInterval</em>). The <em>resampleInterval</em> determines the
                subintervals to which the specified functions will be applied.</para>
            	<para>Beginning with <em>startTime</em> and selecting the data within the next
                <em>resampleInterval</em>, the values specified by <em>aggregate</em> will be
                determined for each subinterval. Reporting shall continue until the request is
                canceled. Caution should be used in specifying start times prior to the present, as
                data which is already available will be returned unthrottled, with
                <em>numIntervals</em> worth of data in each response. Once all data which has
                already been collected has been sent, new data shall be sent as soon as a full
                <em>numIntervals</em> worth of data is available.</para>
            	<para>If there is no new data for a (<em>numIntervals</em>*
                <em>resampleInterval</em>) period, the server shall still send a response, with
                empty pointers for the arrays and dwCount = 0. This will allow the client to be
                sure that the connection is still active. For MinimumActualTime and
                MaximumActualTime, if more than one instance of the value exists within a
                subinterval, which instance (time stamp) of the value returned is server dependent.
                In any case, the server may set the OPCHDA_EXTRADATA quality flag to let the caller
                know that there are other timestamps with that value. See the discussion at
                ReadProcessed for specifics of what a server should return to the client in various
                situations.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history to be read.</param>
            <param name="resampleInterval">Interval between returned values.</param>
            <param name="server">The list server item handles for the items to be read.</param>
            <param name="aggregates">The list of aggregate values to be returned.</param>
            <param name="numIntervals">Number of resample intervals between updates.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAtTime(System.Int32,System.DateTime[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function reads the values and qualities from the history database for
                the specified timestamps for one or more items.</para>
            	<para>This function is intended to provide values to correlate with other values
                with a known timestamp. For example, the values of sensors when lab samples were
                collected.</para>
            	<para>The results are returned via the client's ReadComplete event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>When no value exists for a specified timestamp, a value shall be interpolated
                from the surrounding values to represent the value at the specified timestamp. The
                interpolation will follow the same rules as the standard Intpolated aggregate as
                outlined in specification Section 2.9 .</para>
            	<para>The OPCHDAitem structure will return OPCHDA_NOAGGREGATE in the
                <em>aggregate</em> field. If a value is found for the specified timestamp, the
                server will return OPCHDA_RAW in the quality. If the value is interpolated from the
                surrounding values, the server will return OPCHDA_INTERPOLATED in the
                quality.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="timeStamps">The timestamps for the requested data.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadModified(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function reads the values, qualities, timestamps, user ID, and timestamp
                of the modification from the history database for the specified time domain for one
                or more items.</para>
            	<para>The purpose of this function is to read values from history that have been
                modified/replaced (a value was returned with a quality of OPCHDA_EXTRADATA,
                indicating that there were other values for that item/timestamp which had been
                superseded).</para>
            	<para>The results are returned via the client's ReadModifiedComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The time domain of the request is defined by <em>startTime</em> and
                <em>endTime</em>. If <em>endTime</em> is less than <em>startTime</em>, the data
                shall be returned in reverse order, with later data coming first. Unlike the
                synchronous method, if <em>numValues</em> is non-zero, the function continues
                sending data in blocks of size <em>numValues</em> until all requested data has been
                sent.</para>
            	<para>The CancelID can be used to cancel the request. If a value has been modified
                multiple times, all values for the time are returned. This means that a time stamp
                can appear in the array more than once.</para>
            	<para>The order of the returned values with the same time stamp should be from most
                recent to oldest modified value. It is server dependent whether it keeps multiple
                modifications or only the most recent. In asynchronous ReadModified, unlike in
                synchronous, if all three parameters (<em>startTime</em>, <em>endTime</em> and
                <em>numValues</em>) are specified, the function continues sending data in blocks of
                size <em>numValues</em> until all requested data has been sent. The CancelID which
                can be used to cancel the request.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="numValues">The maximum number of values returned for any item
            over the time range. If only one time is specified, this
            number specifies the extent of the time range.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAttribute(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function reads the attribute values and timestamps from the history
                database for the specified time domain for an item.</para>
            	<para>This function is intended to be used to retrieve attributes that have changed
                to correlate the values of these attributes with the values of their data. For
                example, the recalibration of a sensor may have required the normal maximum and
                minimum attributes to be changed.</para>
            	<para>The results are returned via the client's ReadAttributeComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_INVALIDHANDLE, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>If the only attribute values available for the item are the current values,
                these shall be returned and the <em>error</em> set to OPC_S_CURRENTVALUE. Except
                for the case where current values are requested (<em>startTime</em> = NOW,
                <em>endTime</em> = NULL), the server shall always return a beginning bounding
                value. Thus, if the client requests attribute values for Jan1, 1997 to October 1,
                1997, the server shall return a value for the attribute on Jan 1, 1997, rather than
                the first value returned being the first new value for the attribute after Jan 1,
                1997.</para>
            	<para>Likewise, the timestamp for that first value shall be Jan 1, 1997, regardless
                of when the attribute actually took that value. All other timestamps shall be for
                the time when the value of the attribute changed.</para>
            	<para>Note that while the client can query the server for the native datatype of an
                ItemID, the client cannot assume that all data sent from the server will be that
                datatype. The datatype of a given ItemID may have changed over the life of the
                Item, and thus clients should be able to handle receiving data of a different
                datatype than that returned from this call.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the attribute history period to br read.</param>
            <param name="endTime">The end of the attribute history period to be read.</param>
            <param name="handleServer">The server item handle for the item to be read</param>
            <param name="attributeIDs">The list of attribute IDs to be read</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding dwAttributeID was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CancelRead(System.Int32)">
            <summary>
            	<para>This synchronous function cancels the outstanding operation. The actual implementation is
                server specific, but the server shall respond via the client's CancelComplete event
                handler unless a FAILED error code is returned from the call.</para>
            	<para>If a FAILED error code is returned, there will be no callback to the
                client's CancelComplete event handler.</para>
            </summary>
            <returns>S_OK, E_INVALIDARG, E_FAIL</returns>
            <param name="cancelID">OUT: The server-generated cancelID which was returned
            from the original method call.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.UpdateCapabilitiesAsync@)">
            <summary>
            This function specifies the update methods that the server supports.
            </summary>
            <param name="capabilities">The methods supported by the interface.</param>
            <returns>S_OK, E_FAIL</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32,System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function inserts values and qualities into the history database for the
                specified timestamps for one or more items. If a value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>error</em>s shall
                indicate an error.</para>
            	<para>This function is intended to insert new values at the specified timestamps;
                e.g., the insertion of lab data to reflect the time of data collection.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be inserted.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Replace(System.Int32,System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function replaces values and qualities in the history database at the
                specified timestamps for one or more items. If no value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>error</em>s shall
                indicate an error. This function is intended to replace existing values at the
                specified timestamp; e.g., correct lab data that was improperly processed, but
                inserted into the history database.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be replaced.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.InsertReplace(System.Int32,System.Int32[],System.Int64[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function inserts or replaces values and qualities at the specified
                timestamps for one or more items. If the item has a value at the specified
                timestamp, the new value and quality shall replace the old one. If there is no
                value at that timestamp, the function shall insert the new data.</para>
            	<para>This function is intended to unconditionally insert/replace values and
                qualities; e.g., correction of values for bad sensors.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>When the UpdateComplete call is sent to the client, S_OK as a <em>error</em>
                return code for an individual value is allowed when the HDA server is unable to
                say whether there was already a value at that timestamp.</para>
            	<para>If the HDA server can determine whether the new value replaces a value that
                was already there, it should use OPC_S_INSERTED or OPC_S_REPLACED to return that
                information.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be
            inserted or replaced.</param>
            <param name="timeStamps">Array of FileTimeUTC time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32,System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function inserts values and qualities into the history database for the
                specified timestamps for one or more items. If a value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>error</em>s shall
                indicate an error.</para>
            	<para>This function is intended to insert new values at the specified timestamps;
                e.g., the insertion of lab data to reflect the time of data collection.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be inserted.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Replace(System.Int32,System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function replaces values and qualities in the history database at the
                specified timestamps for one or more items. If no value exists at the specified
                timestamp, the new value shall not be inserted; instead <em>error</em>s shall
                indicate an error. This function is intended to replace existing values at the
                specified timestamp; e.g., correct lab data that was improperly processed, but
                inserted into the history database.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be replaced.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.InsertReplace(System.Int32,System.Int32[],System.DateTime[],System.Object[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function inserts or replaces values and qualities at the specified
                timestamps for one or more items. If the item has a value at the specified
                timestamp, the new value and quality shall replace the old one. If there is no
                value at that timestamp, the function shall insert the new data.</para>
            	<para>This function is intended to unconditionally insert/replace values and
                qualities; e.g., correction of values for bad sensors.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>When the UpdateComplete call is sent to the client, S_OK as a <em>error</em>
                return code for an individual value is allowed when the HDA server is unable to
                say whether there was already a value at that timestamp.</para>
            	<para>If the HDA server can determine whether the new value replaces a value that
                was already there, it should use OPC_S_INSERTED or OPC_S_REPLACED to return that
                information.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be
            inserted or replaced.</param>
            <param name="timeStamps">Array of the time stamps for the new values.</param>
            <param name="dataValues">Array of structures which contain the item values.</param>
            <param name="qualities">Array of the quality flags of the new values. These are
            the Data Access Quality flags, not the HDA quality flags.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.DeleteRaw(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function deletes the values, qualities, and timestamps from the history
                database for the specified time domain for one or more items. This function is
                intended to be used to delete data that has been accidentally entered into the
                history database; e.g., deletion of data from a source with incorrect
                timestamps.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be deleted.</param>
            <param name="endTime">The end of the history period to be deleted.</param>
            <param name="server">The list of server item handles for the items to be deleted.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.DeleteAtTime(System.Int32,System.Int32[],System.DateTime[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function is intended to be used to delete specific data from the history
                database; e.g., lab data that is incorrect and cannot be correctly
                reproduced.</para>
            	<para>The results are returned via the client's UpdateComplete event
                handler.</para>
            	<para>
            		<para>This function deletes the values and qualities in the history database
                    for the specified timestamps for one or more items.</para>
            	</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the items to be deleted.</param>
            <param name="timeStamps">The timestamps for the data to be deleted.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CancelUpdate(System.Int32)">
            <summary>
            	<para>This synchronous function cancels the outstanding operation.</para>
            	<para>The actual implementation is server specific, but the server shall respond
                via the client's CancelComplete event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_INVALIDARG, E_FAIL</returns>
            <param name="cancelID">OUT: The server-generated cancelID which was returned
            from the original method call.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryCapabilities(OPCHDA.NET.AnnotationCapabilitiesAsync@)">
            <summary>
            This function specifies the methods that the server supports.
            </summary>
            <param name="capabilities">The methods supported by the interface.</param>
            <returns>S_OK, E_FAIL</returns>
            <remarks>
            While a part of the AsyncAnnotations interface, this method will actually run to completion before
            returning.
            </remarks>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadAnnotations(System.Int32,OPCHDA.NET.OPCHDAtime,OPCHDA.NET.OPCHDAtime,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function reads the annotations from the history database in the
                specified time domain for the specified item IDs.</para>
            	<para>This function is intended to read annotations for an item at specified
                timestamps.</para>
            	<para>The results are returned via the client's ReadAnnotations event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The time domain of the request is defined by <em>startTime</em> and
                <em>endTime</em>. If <em>endTime</em> is less than <em>startTime</em> the data
                shall be returned in reverse order, with later data coming first.</para>
            	<para>If either <em>startTime</em> or <em>endTime</em> is given in string
                (relative) format, the absolute time of the OPCHDAtime structure (<em>time</em>)
                shall be set to the DateTime which the relative time was translated to by the
                server. OPC_S_NODATA is returned only if no values are returned.</para>
            	<para>The order of the data returned shall match the order of the ItemIDs in the
                request.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The beginning of the history period to be read.</param>
            <param name="endTime">The end of the history period to be read.</param>
            <param name="server">The list of server item handles for the annotation items
            to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual annotation reads. The errors correspond to
            the handles passed in <em>server</em>. This indicates whether
            the read succeeded in obtaining a defined annotation
            item. NOTE any FAILED error code indicates that the
            corresponding Annotation structure is undefined.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Insert(System.Int32,System.Int32[],System.DateTime[],OPCHDA.NET.OPCHDAannotation[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>This asynchronous function inserts annotations into the history database. This function is
                intended to insert annotations by users to document observations for a value at a
                specified timestamp.</para>
            	<para>The results are returned via the client's InsertAnnotations event
                handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="server">The list of server item handles for the annotation items
            to be inserted.</param>
            <param name="timeStamps">Array of time stamps for the annotations to be inserted.</param>
            <param name="annotationValues">Array of structures containing the annotation values to
            be inserted.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual annotation inserts. The errors correspond to
            the handles passed in <em>server</em>.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CancelAnnotations(System.Int32)">
            <summary>
            	<para>This synchronous function cancels the outstanding operation.</para>
            	<para>The actual implementation is server specific, but the server shall respond
                via the client's CancelComplete event handler.</para>
            </summary>
            <returns>S_OK, E_INVALIDARG, E_FAIL</returns>
            <param name="cancelID">OUT: The server-generated cancelID which was returned
            from the original method call.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadRawWithUpdate(System.Int32,OPCHDA.NET.OPCHDAtime@,OPCHDA.NET.OPCHDAtime@,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>The <strong>playback functionality</strong> of a History server provides the
                capability to get an initial set of data from the History server and then get
                continual updates of historical data. This is different than the Asynchronous
                Advise methods in that those methods are centered around the current time. The
                playback interface supports methods that retrieval data from the past and then
                supply updates from stored data. Typically the updates are sent at a rate that is
                more frequent than the time the data was stored. For example, the request could be
                to send 10 minutes worth of data every minute.</para>
            	<para>This function is intended to be used to playback raw history data.</para>
            	<para>By controlling the update interval, the data can be displayed on trends in
                real time, in slower motion, or faster than real time. This function initially
                retrieves data from the start time to the end time. After the initial response it
                periodically (every <em>updateInterval</em>) responds with an
                <em>updateDuration</em> amount of data.</para>
            	<para>The time of the last value returned in the initial response is used as the
                start time for the first update. After that, the time of the last value returned in
                an update is used as the start time for the next update.</para>
            	<para>The results are returned via the client's Playback event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>Playback is only supported in the forward direction. The domain of the
                initial request is defined by <em>startTime</em>, <em>endTime</em>, and
                <em>numValues</em></para>
            	<para>The value of <em>startTime</em> must be defined. If <em>endTime</em> is not
                specified, the request shall be for all data from the <em>startTime</em> for the
                requested number of values. Then further data shall be sent according to the
                <em>updateDuration</em> and <em>updateInterval</em> from the time of the last value
                returned. If either the <em>startTime</em> or <em>endTime</em> is given in string
                (relative) format, the absolute time of the OPCHDAtime structure (<em>time</em>)
                will be set to the DateTime the relative time was translated to by the
                server.</para>
            	<para>This request continues sending data in blocks of <em>numVals</em> until all
                requested data has been sent, returns transaction ID which can be used to cancel
                the request, and uses the update rate on the group to throttle the rate of block
                returns. The <em>numValues</em> defines the maximum number of values for any item
                which will be returned in a single callback. This could be for the initial set of
                data or any subsequent updates (notice therefore that an update may require more
                than one callback). Implementation of the operation is server dependent.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The earliest time of the history to be read.</param>
            <param name="endTime">The latest time of the history to be read. The end time
            must be greater than the start time, otherwise INVALID_PARMS is returned.</param>
            <param name="numValues">The maximum number of values returned for any item
            over the time range. If only one time is specified, this
            number specifies the extent of the time range.</param>
            <param name="updateDuration">The amount of time the update covers in.</param>
            <param name="updateInterval">The interval to send data for updates.</param>
            <param name="server">The list of server item handles for the items to be read.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. Indicates only whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ReadProcessedWithUpdate(System.Int32,OPCHDA.NET.OPCHDAtime@,OPCHDA.NET.OPCHDAtime@,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32[],System.Int32[],System.Int32@,System.Int32[]@)">
            <summary>
            	<para>The <strong>playback functionality</strong> of a History server provides the
                capability to get an initial set of data from the History server and then get
                continual updates of historical data. This is different than the Asynchronous
                Advise methods in that those methods are centered around the current time. The
                playback interface supports methods that retrieval data from the past and then
                supply updates from stored data. Typically the updates are sent at a rate that is
                more frequent than the time the data was stored. For example, the request could be
                to send 10 minutes worth of data every minute.</para>
            	<para>This operation initially retrieves data from the start time to the end
                time.</para>
            	<para>After the initial response it periodically (every <em>updateInterval</em>)
                responds with <em>numIntervals</em> worth of data divided into
                <em>resampleInterval</em> sized bins. The time of the last value returned in the
                initial response is used as the start time for the first update. After that, the
                time of the last value returned in an update is used as the start time for the next
                update.</para>
            	<para>This function is intended to be used to playback processed history data. By
                controlling the update interval, the data can be displayed on trends in real time,
                in slower motion, or faster than real time.</para>
            	<para>The results are returned via the client's Playback event handler.</para>
            </summary>
            <returns>S_OK, S_FALSE, OPC_E_MAXEXCEEDED, E_NOTIMPL, E_INVALIDARG, E_FAIL</returns>
            <remarks>
            	<para>The domain of the initial request is defined by <em>startTime</em>,
                <em>endTime</em>, and <em>resampleInterval</em>. If <em>startTime</em> or
                <em>endTime</em> is given in string (relative) format, the value returned will be
                the DateTime to which that value was translated by the server.</para>
            	<para>All three must be specified. <em>endTime</em> must be greater than
                <em>startTime</em>.</para>
            	<para>The <em>resampleInterval</em> determines how many subintervals the complete
                interval is divided into.</para>
            	<para>The specified function is calculated at each subinterval beginning with
                <em>startTime</em> and selecting the data within the next
                <em>resampleInterval</em>, a value will be calculated according to the
                <em>aggregate</em> at each subinterval. For MinimumActualTime and MaximumActualTime
                used with aggregate values, if more than one instance of the value exists within a
                time range, which instance (time stamp) of the value is returned is server
                dependent.</para>
            	<para>In any case, the server may set the OPCHDA_EXTRADATA quality flag to let the
                caller know that there are other timestamps with that value. The domain of updates
                is defined by the time of the last value returned, the <em>resampleInterval</em>
                and <em>numIntervals</em>. A <em>resampleInterval</em> of 0 is illegal resulting in
                a return status of E_INVALIDARG. If only an initial set of data is desired, the
                <em>numIntervals</em> should be set to 0 The request must still be
                cancelled.</para>
            	<para>The <em>updateInterval</em> can not be less than the
                <em>resampleInterval</em>. The order of the data returned will match the order of
                the ItemIDs in the request.</para>
            </remarks>
            <param name="transactionID">An identifier created by the client and passed to the
            server in this call. The server shall return this identifier
            along with the results of this call.</param>
            <param name="startTime">The earliest time of the history to be read.</param>
            <param name="endTime">The latest time of the history to be read.</param>
            <param name="resampleInterval">Time between return values.</param>
            <param name="numIntervals">The number of ResampleIntervals in an update.</param>
            <param name="updateInterval">The interval to send data for updates.</param>
            <param name="server">The list of processed server items to be retrieved.</param>
            <param name="aggregate">The list of processed values to be returned.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case
            the operation needs to be canceled.</param>
            <param name="errors">OUT: Array of HRESULTs indicating the success of the
            individual item reads. Indicates only whether the
            corresponding server handle was valid.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.CancelPlayback(System.Int32)">
            <summary>
            	<para>This function cancels the outstanding operation.</para>
            	<para>The actual implementation is server specific, but the server shall respond
                via the CancelComplete event handler.</para>
            </summary>
            <returns>S_OK, E_INVALIDARG, E_FAIL</returns>
            <param name="cancelID">OUT: The server-generated cancelID which was returned
            from the original method call.</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.SetLocaleID(System.Int32)">
            <summary>
            Set the default LocaleId for this session.  ( IOPCCommon::SetLocaleID )
            </summary>
            <param name="lcid">IN: requested LocalId</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetLocaleID(System.Int32@)">
            <summary>
            Get the current default LocalID.  ( IOPCCommon::GetLocaleID )
            </summary>
            <param name="lcid">OUT: LocaleId code</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryAvailableLocaleIDs(System.Int32[]@)">
            <summary>
            Query the LocaleIDs supported by the OPC Server. ( IOPCCommon::QueryAvailableLocaleIDs )
            If any error occurs a ThrowExceptionForHR is thrown. 
            </summary>
            <param name="lcids">OUT: array with LocalIDs</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetErrorString(System.Int32)">
            <summary>
            Return the description for the specified error.
            If any error occurs a ThrowExceptionForHR is thrown. 
            </summary>
            <param name="errorCode">HRESULTS error code</param>
            <returns>error description string</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.GetErrorString(System.Int32,System.String@)">
            <summary>
            Return the description for the specified error.
            If any error occurs a ThrowExceptionForHR is thrown. 
            </summary>
            <returns>S_OK or E_FAIL</returns>
            <param name="error">HRESULTS error code</param>
            <param name="errText">OUT: error description string</param>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.SetClientName(System.String)">
            <summary>
            Define a client name.  ( IOPCCommon::SetClientName )
            </summary>
            <param name="name">IN: name, e.g. node and exe name</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.IsAvailableNT(System.Boolean@)">
            <summary>
            Query the current security configuration of the OPC server to determine if the current server configuration 
            provides OPC Security by NT credentials.
            </summary>
            <param name="available">TRUE: current configuration allows authorization using NT credentials, 
            FALSE: current configuration has authorization using NT credentials disabled</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.QueryMinImpersonationLevel(System.Int32@)">
            <summary>
            Information method to help a client to determine the minimal impersonation level the server requires to gain 
            proper access to secured data sources.
            </summary>
            <param name="minImpLevel">Least required impersonation level for proper access: RPC_C_IMP_LEVEL_ANONYMOUS,
            RPC_C_IMP_LEVEL_IDENTIFY, RPC_C_IMP_LEVEL_IMPERSONATE, RPC_C_IMP_LEVEL_DELEGATE</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ChangeUser">
            <summary>
            Signal the server that the client has changed the user credentials of its proxy blanket.
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.IsAvailablePriv(System.Boolean@)">
            <summary>
            Query the current security configuration of the OPC server to determine if the current server 
            configuration provides OPC Security by private credentials.
            </summary>
            <param name="available">TRUE: current configuration allows authentication by private credentials, 
            FALSE: current configuration has authentication by private credentials</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Logon(System.String,System.String)">
            <summary>
            Changes the identity of the client application’s user. Future access to any security objects will be authorized 
            with the new user’s credentials until a subsequent call to Logoff() or Logon(). 
            For OPC Servers which also implement IOPCSecurityNT, access checking with NT credentials will be disabled until Logoff() is called.
            </summary>
            <param name="userID">The user’s logon name; for logons in NT domains this string contains also the domain name, e.g., “OPC\Ben”</param>
            <param name="password">The user’s password.</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.Logoff">
            <summary>
            Remove the private credential established by the previous call to Logon(). 
            OPC Security reverts to the state before the first call of Logon(), 
            there are no private credentials active for the client.
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.OpcHDAServer.ConvertToSystemType(System.Int16)">
            <summary>
            Converts a VarEnum to a system type
            </summary>
            <param name="vt"></param>
            <returns></returns>
        </member>
        <member name="P:OPCHDA.NET.OpcHDAServer.Version">
            <summary>
            Version number of the HDA .Net Wrapper
            </summary>
        </member>
        <member name="P:OPCHDA.NET.OpcHDAServer.ServerName">
            <summary>
            Name of the connected HDA server
            </summary>
        </member>
        <member name="P:OPCHDA.NET.OpcHDAServer.HostInfo">
            <summary>
            Server access information ( domain, user, password ) 
            </summary>
        </member>
        <member name="P:OPCHDA.NET.OpcHDAServer.ConnectStatus">
            <summary>
            Current server connect status. Contains either 'Connected', 'Disconnected' or the Connect() exception message.
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHDAServer.ShutdownRequested">
            <summary>
            ShutdownRequest Event Handler
            </summary>
        </member>
        <member name="T:OPC.ErrorDescriptions">
            <summary>
            Helper class with descriptions of OPC and Windows erros.
            </summary>
        </member>
        <member name="M:OPC.ErrorDescriptions.GetErrorDescription(System.Int32)">
            <summary>
            Get the description for the specified error code.
            </summary>
            <param name="hr">OPC or Windows error code.</param>
            <returns></returns>
        </member>
        <member name="M:OPC.ErrorDescriptions.getExceptionHRresult(System.Exception)">
            <summary>
            Returns the private HResult field from an Exception object
            </summary>
            <param name="ex">Exception object</param>
            <returns>The HResult code from the Exception HResult field.</returns>
        </member>
        <member name="F:OPC.Common.Host.HostName">
            <summary>
            Name of he computer hosting the OPC server.
            </summary>
        </member>
        <member name="F:OPC.Common.Host.UserName">
            <summary>
            User name on the host computer
            </summary>
        </member>
        <member name="F:OPC.Common.Host.Password">
            <summary>
            Password for host computer.
            </summary>
        </member>
        <member name="F:OPC.Common.Host.Domain">
            <summary>
            Domain name for the server access.
            </summary>
        </member>
        <member name="M:OPC.Common.ComApi.GetComputerName">
            <summary>
             Retrieves the name of the local computer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPC.Common.ComApi.CreateInstance(System.Guid,OPC.Common.Host)">
            <summary>
            Create an instance of the OPC COM server
            </summary>
            <param name="clsid">CLSIDof the OPC HDA server</param>
            <param name="host">Server access credentials (computer name, domain, user, password)</param>
            <returns></returns>
        </member>
        <member name="T:OPCHDA.NET.BrowseHDATree">
            <summary>
            	<para>This methods in this class are not defined in the OPC HDA specification.</para>
            	<para>The methods in this class simplify the browsing of the OPC server's address
                space. The full hierachical structure is browsed and the browse result is returned
                in a TreeNode array that can directly be used with a Windows TreeView.
                controls.</para>
            	<para><u>C# Sample:</u></para>
            	<para>OPCHDABrowser browser;<br/>
                int[] err;<br/>
                int rtc = OpcSrv.CreateBrowse( null, null, null, out browser, out err );<br/>
                BrowseTree ItemTree = new BrowseTree( browser );<br/>
                ItemTree.CreateTree(); // Browse server from root<br/>
                treeviewItems.Nodes.AddRange( ItemTree.Root() );</para>
            	<para>
            		<para><u>VB Sample:</u></para>
            		<para>Dim browser As OPCHDABrowser<br/>
                    Dim err as Int32()<br/>
                    Dim rtc As Int32 = OpcSrv.CreateBrowse( Nothing,Nothing,Nothing, browser, err )<br/>
                    Dim ItemTree As BrowseTree = New BrowseTree( browser )<br/>
                    ItemTree.CreateTree() ' Browse server from root<br/>
                    treeviewItems.Nodes.AddRange(ItemTree.Root())</para>
            	</para>
            </summary>
            <remarks>This is a browse helper class that is not defiend by OPC HDA.
            </remarks>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.#ctor(OPCHDA.NET.OPCHDABrowser)">
            <summary>
            Constructor. An empty BrowseTree object is created.<br/>
            Use the <see cref="M:OPCHDA.NET.BrowseHDATree.CreateTree">CreateTree</see> method to browse the server.<br/>
            </summary>
            <param name="brw"> HDA server browser object to be used. Each HDA browser has a set 
            of filter that are defined when the OPCHDABrowser object is created.
            </param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.#ctor(OPCHDA.NET.OPCHDABrowser,System.Windows.Forms.TreeView)">
            <summary>
            Constructor. An empty BrowseTree object is created. 
            The passed OPCHDABrowser is used to browse the server.<br/>
            If a TreeView control is passed then a mouse handler is installed for it and
            OneLevelBrowseMode is selected. The server is browsed incrementally when a branch is
            selected for the first time. Initially only the root level is browsed.<br/>
            The created TreeNode structure contains on each level all the items and sub-branches. 
            Use the methods isItem() and isBranch() to determine what a specific TreeNode object represents.<br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).<br/>
            Use the <see cref="M:OPCHDA.NET.BrowseHDATree.CreateTree">CreateTree</see> method to browse the server.
            </summary>
            <param name="brw">HDA server browser object to be used. 
            Each HDA browser has a set of filter that are defiend when the browser object is created.
            </param>
            <param name="trview">
            	<para>If a TreeView object is specified than a MouseDown event handler is installed
                to handle incremental browsing. In this mode the initial browsing does browse only
                the root node. This event handler browses and displays the subnodes when the branch
                is selected for the first time.</para>
            	<para>The property OneLevelBrowseMode (incremental browsing) is initialized to true
                when a TreeView object is defined.</para>
            </param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.Dispose">
            <summary>
            This method must be called to uninstall the TreeView mouse event handler.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.CreateTree">
            <summary>
            Browse the server from the root and build a TreeNode structure with all
            branches and items.<br/>
            Depending on the property OneLevelBrowseMode, this is done in the initial
            browse (when FALSE) or incrementally when a branch is selected for the first time
            (when TRUE).
            
            
            This method does the actual server browsing. 
            It has to be called before any of the other methods can be used. 
            The server is browsed from the root and the browse result is stored in a class internal 
            TreeNode structure. Derived classes handle the browse result in different ways. 
            Use the Root() method to get the created 
            TreeNode[] object and handle is application specific.<br/>
            The created TreeNode structure contains on each level all the items and sub-branches. 
            Use the methods isItem() and isBranch() to determine what a specific TreeNode object represents.<br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.Root">
            <summary>
            	<para>Get the TreeNode structure with the browsed server structure.</para>
            	<para><u>C# sample:</u></para>
            	<para>OPCHDABrowser browser;<br/>
                int[] err;<br/>
                int rtc = OpcSrv.CreateBrowse( null, null, null, out browser, out err );<br/>
                BrowseTree ItemTree = new BrowseTree( browser );<br/>
                ItemTree.CreateTree(); // Browse server from root<br/>
                treeviewItems.Nodes.AddRange( ItemTree.Root() );</para>
            	<para>
            		<para>
            			<para><em>VB sample:</em></para>
            			<para>Dim browser As OPCHDABrowser<br/>
                        Dim err as Int32()<br/>
                        Dim rtc As Int32 = OpcSrv.CreateBrowse( Nothing,Nothing,Nothing, browser,
                        err )<br/>
                        Dim ItemTree As BrowseTree = New BrowseTree( browser )<br/>
                        ItemTree.CreateTree() ' Browse server from root<br/>
                        treeviewItems.Nodes.AddRange(ItemTree.Root())</para>
            		</para>
            	</para>
            </summary>
            <returns>TreeNode array with all server branches and items</returns>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.ShowImageList">
            <summary>
            Show all images defined in the BrowseTree ImageList
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.isLeaf(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a leaf or a branch
            </summary>
            <param name="node">node to be checked</param>
            <returns>true if the node is a leaf</returns>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.isBranch(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a branch or a leaf.
            </summary>
            <param name="node">node to be checked</param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.ItemName(System.Windows.Forms.TreeNode)">
            <summary>
            	<para>Get the full name of the item/branch in the specified branch.</para>
            	<para>This method is typically used to get the name of the node selected in a
                TreeView.</para>
            	<para><em>C# sample:</em></para>
            	<para>TreeNode sel = e.Node ;<br/>
                string selItem = ItemTree.ItemName( sel ) ;</para>
            	<para><u>VB sample:</u></para>
            	<para>Dim sel As TreeNode<br/>
                sel = e.Node<br/>
                Dim selItem As String<br/>
                selItem = ItemTree.ItemName(sel)</para>
            </summary>
            <returns>full item/branch name</returns>
            <param name="node">Node to be handled</param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.Browse(System.String,System.Windows.Forms.TreeNode[]@)">
            <summary>
            Browse all branches/leafs from the defined branch and build a TreeNode structure.<br/>
            The HDA browser assigned to this object is used. The browsing is done with
            the filters defined for this HDA browser.<br/>
            If the OneLevelBrowseMode property is true, then only the specified branch is browsed. 
            Otherwise the server is browsed recursively from the defined start branch.<br/>
            The created TreeNode structure contains on each level all the items and sub-branches. 
            Use the methods isItem() and isBranch() to determine what a specific TreeNode object represents.<br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
            <remarks>This is a low level method that may be used to browse part of the server</remarks>
            <param name="startBranch">IN: name of the branch to be browsed</param>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.Browse(System.Windows.Forms.TreeNode[]@)">
            <summary>
            Browse branches/leafs from the root and build a TreeNode structure.
            The HDA browser assigned to this object is used. The browsing is done with the filters defined
            for this HDA browser.<br/>
            If the OneLevelBrowseMode property is true, then only the root branch is browsed. 
            Otherwise the server is browsed recursively from the root branch.<br/>
            The created TreeNode structure contains on each level all the items and sub-branches. 
            Use the methods isItem() and isBranch() to determine what a specific TreeNode object represents.<br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
            <remarks>This is a low level method that may be used to browse part of the server</remarks>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.Browse(System.String,System.Boolean,System.Boolean,System.Windows.Forms.TreeNode[]@)">
            <summary>
            Browse the current branch for branches/leafs and build a TreeNode structure
            The  nodes returned depends on the selection parameters.
            The HDA browser assigned to this object is used. The browsing is done with the filters defined
            for this HDA browser.
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
            <remarks>This is a low level method that may be used to browse part of the server</remarks>
            <param name="ownBranch">The name of the current branch.</param>
            <param name="OneLevelOnly">IN: if true the browse is limited to the current branch.</param>
            <param name="IncludeItems">IN: if true items and branches are returned in the browse result, otherwise only branches.</param>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
        </member>
        <member name="M:OPCHDA.NET.BrowseHDATree.ConvertToTreeList(System.String)">
            <summary>
            Convert the TreeNode structure into a TreeNode structue with branches only. 
            The items are in a ListView structure that is referenced from the TreeNode Tag.<br/>
            The TreeNode Tag property of branch nodes is changed to contain a tlNodeInfo object.
            This object contains the fully qualified name of the branch and a ListViewItem array 
            with all items in this branch.
            </summary>
            <remarks>This is a low level method that may be used to browse part of the server</remarks>
            <param name="rootName">Start TreeNode</param>
        </member>
        <member name="F:OPCHDA.NET.BrowseHDATree.ItemCodeIndex">
            <summary>
            Code used to identify items and branches in TreeNode.ImageIndex<br/>
            Default:   Item:  >= 2<br/>
            </summary>
        </member>
        <member name="F:OPCHDA.NET.BrowseHDATree.ImageIndexItem">
            Base Index of the image group the item identification. The item accessRight code is added 
            and the image with this index is displayed.
        </member>
        <member name="F:OPCHDA.NET.BrowseHDATree.ImageIndexBranch">
            <summary>
            Index of the image displayed for branches
            </summary>
        </member>
        <member name="F:OPCHDA.NET.BrowseHDATree.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="P:OPCHDA.NET.BrowseHDATree.ImageList">
            <summary>
            This readOnly property contains the ImageList with icons displayed in the TreeView 
            with the items and branches. 
            </summary>
        </member>
        <member name="P:OPCHDA.NET.BrowseHDATree.BrowseModeOneLevel">
            <summary>
            Defines the browse mode. TRUE: The initial browse does browse only the root node
            FALSE: The initial browse does browse the complete server structure. 
            With some servers this may take a long time and generate a huge structure.
            The constructor initializes this property to TRUE if a TreeView object is passed.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.tlNodeInfo">
            <summary>
            TreeList node information for the link from the TreeNode branch to the 
            TreeView with it's items. A reference to such an object is in the TreeNode
            Tag field.<br/>
            The ListViewItem tag property contain the fully qualified ID of its item.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.tlNodeInfo.#ctor(System.String,System.Int32)">
            <summary>
            Constuctor. Typically only used OPCHDA.NET internally.
            </summary>
            <param name="pName">path name of the branch.</param>
            <param name="len">number of items in the branch</param>
        </member>
        <member name="F:OPCHDA.NET.tlNodeInfo.path">
            <summary>
            Path name of the owner branch.
            </summary>
        </member>
        <member name="F:OPCHDA.NET.tlNodeInfo.itemNames">
            <summary>
            Array of ListView object withthe name of the items in the branch.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ShowHDABrowseTree">
            <summary>
            The OPC server is browsed using the assigned OPCHDABrowser and the browse result 
            is displayed in a TreeView control. <br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).
            The methods isItem() and isBranch() can be used to determine the node type.
            </summary>
            <remarks>This is a browse helper class that is not defiend by OPC HDA</remarks>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.#ctor(OPCHDA.NET.OPCHDABrowser,System.Windows.Forms.TreeView)">
            <summary>
            Constructor. An object is created for the given OPCHDABrowser and Forms TreeView control. 
            No OPC server access is done in this constructor. The Show() method must be called to 
            browse the server and display the result.<br/>
            A mouse handler is installed for the specified TreeView control. 
            The OneLevelBrowseMode is selected. Initially only the root level is browsed. 
            The mouse handler browses the branches whenever a branch is selected for the first time.<br/>
            The default browse ImageList is assigned to the TreeView control and the items are
            displayed with an icon indicating the read/write access rights of the item.
            </summary>
            <param name="brw"> HDA server browser object to be used. Each HDA browser has a set of 
            filter that are defined when the browser object is created. </param>
            <param name="tvTree">Forms TreeView control where the browse result is displayed.</param>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.Show">
            <summary>
            Browses the server and displays the branches and items in a TreeView control.<br/>
            The TreeNode Tag property contains the fully qualified name of this node (item or branch).<br/>
            The methods isItem() and isBranch() can be used to determine what a specific TreeNode 
            object represents.<br/>
            </summary>
            <returns>S_OK or HRESULT from a failed browse function</returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.Dispose">
            <summary>
            This method must be called to uninstall the TreeView mouse event handler.
            </summary>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.ShowImageList">
            <summary>
            Show all images defined in the assigned ImageList
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.isLeaf(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a leaf or a branch
            </summary>
            <param name="node">Node to be checked</param>
            <returns>true if the node is a leaf</returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.isBranch(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a branch or a leaf.
            </summary>
            <param name="node">Node to be checked</param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTree.ItemName(System.Windows.Forms.TreeNode)">
            <summary>
            	<para>Get the full name of the item/branch in the specified branch.</para>
            	<para>This method is typically used to get the name of the node selcted in a
                treeView.</para>
            	<para><u>C# sample:</u></para>
            	<para>TreeNode sel = e.Node ;<br/>
                string selItem = ItemTree.ItemName( sel ) ;</para>
            	<para><u>VB sample:</u></para>
            	<para>Dim sel As TreeNode<br/>
                sel = e.Node<br/>
                Dim selItem As String<br/>
                selItem = ItemTree.ItemName(sel)</para>
            </summary>
            <returns>full item/branch name</returns>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.ItemCodeIndex">
            <summary>
            Code used to identify items and branches in TreeNode.ImageIndex<br/>
            The isBranchand isItem methods use thye definition to find the type of the node.<br/>
            Default:   Item:  >= 2<br/>
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.ImageIndexItem">
            <summary>
            Base Index of the image group the item identification. The item accessRight code is added 
            and the image with this index is displayed.
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.ImageIndexBranch">
            <summary>
            Index of the image displayed for a branch
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.ImageList">
            <summary>
            Image list used in the BrowsTree
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTree.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only one level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ShowHDABrowseTreeList">
            <summary>
            The methods in this class simplify the browsing and display of the OPC server's address space. 
            The OPC server is browsed and the branches are displayed in a Forms TreeView control. 
            The items of the selected branch are displayed in a Forms ListView control. 
            Node images are displayed as shown in the picture. The user can select other images or 
            supply his own ImageList. The whole hierarchical tree structure is browsed and displayed. 
            In default mode, the server is browsed as needed, initially the root level and each branch when 
            it is selected for the first time. This results in a short latency, even for servers with a 
            large address space. The BrowseTreeList object's BowseModeOneLevel property can be set to false, 
            to force browsing all levels in the first call. 
            The TreeNode Tag property contains the tlNodeInfo object. This contains the full path name of
            the branch and the ListViewItem array with all item in this branch. The ListViewItem Tag property 
            contains the fully qualified Item ID.
            The methods isItem() and isBranch() can be used to determine the node type.<br/>
            </summary>
            <remarks>This is a browse helper class that is not defined by OPC HDA</remarks>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.#ctor(OPCHDA.NET.OPCHDABrowser,System.Windows.Forms.TreeView,System.Windows.Forms.ListView)">
            <summary>
            Constructor. An object is created for the given OPCHDABrowser and TreeView/ListView dialogs. 
            No OPC server access is done in this constructor. The Show() method must be called to 
            browse the server and display the result.<br/>
            A mouse handler is installed for the specified TreeView control. 
            The OneLevelBrowseMode is selected. Initially only the root level is browsed. 
            The mouse handler browses the branches whenever a branch is selected for the first time.<br/>
            The default browse ImageList is assigned to the TreeView/ListView control.
            </summary>
            <param name="brw"> HDA server browser object to be used. Each HDA browser has a set of 
            filter that are defined when the browser object is created. </param>
            <param name="tvBranches">Forms TreeView dialog where the browse result is displayed.</param>
            <param name="lvItems">The leafs of the selected branch are displayed in this Forms ListView control</param>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.Dispose">
            <summary>
            Must be called to uninstall the event handlers
            </summary>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.Show(System.String)">
            <summary>
            Browses the server and displays all branches in the TreeView control 
            and the items of the selected branch in the ListView control.
            </summary>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.ShowImageList">
            <summary>
            Show all images defined in the BrowseTree ImageList
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.isLeaf(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a leaf or a branch
            </summary>
            <param name="node"></param>
            <returns>true if the node is a leaf</returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.isBranch(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if a node is a branch or a leaf.
            </summary>
            <param name="node"></param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="M:OPCHDA.NET.ShowHDABrowseTreeList.ItemName(System.Windows.Forms.TreeNode)">
            <summary>
            	<para>Get the full name of the item/branch in the specified branch.</para>
            	<para>This method is typically used to get the name of the node selected in a
                treeView.</para>
            	<para><u>C# sample:</u></para>
            	<para>TreeNode sel = e.Node ;<br/>
                string selItem = ItemTree.ItemName( sel ) ;</para>
            	<para><u>VB sample:</u><br/>
                Dim sel As TreeNode<br/>
                sel = e.Node<br/>
                Dim selItem As String<br/>
                selItem = ItemTree.ItemName(sel)</para>
            </summary>
            <returns>full item/branch name</returns>
            <param name="node">Branch/Leaf to get the item for</param>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.ItemCodeIndex">
            <summary>
            Code used to identify items and branches in TreeNode.ImageIndex<br/>
            The isBranchand isItem methods use thye definition to find the type of the node.<br/>
            Default:   Item:  >= 2<br/>
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.ImageIndexItem">
            <summary>
            Base Index of the image group the item identification. The item accessRight code is added 
            and the image with this index is displayed.
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.ImageIndexBranch">
            <summary>
            Index of the image displayed for a branch
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.ImageList">
            <summary>
            Image list used in the BrowsTree
            </summary>
        </member>
        <member name="P:OPCHDA.NET.ShowHDABrowseTreeList.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only one level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.DataChangeEventArgs">
            <summary>
            Data passed to the client DataChange callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ReadCompleteEventArgs">
            <summary>
            Data passed to the client ReadComplete callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ReadModifiedCompleteEventArgs">
            <summary>
            Data passed to the client ReadModifiedComplete callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ReadAttributeCompleteEventArgs">
            <summary>
            Data passed to the client ReadAttributeComplete callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.ReadAnnotationsEventArgs">
            <summary>
            Data passed to the client ReadAnnotations callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.InsertAnnotationsEventArgs">
            <summary>
            Data passed to the client InsertAnnotations callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.PlaybackEventArgs">
            <summary>
            Data passed to the client Playback callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.UpdateCompleteEventArgs">
            <summary>
            Data passed to the client UpdateComplete callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.CancelCompleteEventArgs">
            <summary>
            Data passed to the client CancelCompletete callback handler.
            </summary>
        </member>
        <member name="T:OPCHDA.NET.OpcHdaCallback">
            <summary>
            Handler for server notivication callbacks
            </summary>
        </member>
        <member name="M:OPCHDA.NET.OpcHdaCallback.AdviseIOPCDataCallback">
            <summary>
            
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.DataChange">
            <summary>
            DataChange callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.ReadComplete">
            <summary>
            ReadComplete callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.ReadModifiedComplete">
            <summary>
            ReadModified callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.ReadAttributeComplete">
            <summary>
            ReadAttribute callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.ReadAnnotations">
            <summary>
            ReadAnnotations callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.InsertAnnotations">
            <summary>
            InsertAnnotations callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.Playback">
            <summary>
            Playback callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.UpdateComplete">
            <summary>
            UpdateComplete callback event handler
            </summary>
        </member>
        <member name="E:OPCHDA.NET.OpcHdaCallback.CancelComplete">
            <summary>
            CancelComplete callback event handler
            </summary>
        </member>
    </members>
</doc>
